# Motorola API

RhoElements 2.0 supports Barcode, WebKit Browser, and many other device capabilities for Motorola Windows Mobile, Windows CE and Android(ET1) devices.

## Build

* Install RhoStudio installer or RhoElements gem with Rhodes latest beta

* To enable Motorola device capabilities, add rhoelements to your application's build.yml file.

    app_type: rhoelements

### Windows Mobile and CE Prerequisites

To build for Motorola Windows Mobile devices, follow the build instructions for [Windows Mobile](/rhodes/build#build-for-windows-mobile).

To build for Motorola Windows CE devices, install MC3000c50b PSDK from the [Symbol support site](http://support.symbol.com/support/search.do?cmd=displayKC&docType=kc&externalId=11964&sliceId=&dialogID=45371217&stateId=0%200%2045367143). Then add MC3000c50b to your application's build.yml file.

        wm:
          sdk: "MC3000c50b (ARMV4I)"

NOTE: RhoElements 2.0 applications would not work in case of incorrect network setup on Windows Mobile device, because RE 2.0 relies on <code>localhost</code> hostname and <code>172.16.154.129</code> IP-address presence.
In general when connected to PC the device should have Internet connectivity, e.g. the user should be able to browse web with Internet Explorer from Windows Mobile device.
In case of broken Internet connectivity, make sure that at <code>Settings</code> » <code>Connections</code> » <code>Connections</code> » <code>Advanced</code> » <code>Select Networks</code>
the value <code>My ISP</code> is selected in both select boxes.

      
### Android Prerequisites

To run a RhoElements application on an ET1 device:

* Install Android USB drivers.
* Define Symbol USB vendor ID (0x05e0) in (user_profile)/.android/adb_usb.ini:

    0x05E0

## Licensing

The following features require Motorola RhoElements v2 license:

* [Motorola Capabilities](/rhoelements/moto-api-beta4#build)
* [Motorola WebKit](/rhoelements/moto-api-beta4#motorola-webkit-browser)
* [Motorola Barcode extension](/rhoelements/moto-api-beta4#barcode-api), [Barcode extension](/rhodes/device-caps#barcode)
* [NFC extension](/rhodes/device-caps#nfc)
* [Database Encryption](/rhodes/rhom#database-encryption)
* [Inline Signature Capture](/rhodes/device-caps#signature-capture)

### License for Motorola devices(Windows Mobile, Windows CE and Android ET1)

When application started on Motorola device, License screen is displayed with the following options:

* Scan Company Name barcode, Scan License barcode
* Enter Company name and License number manually
* License device via Internet.

Both type of Motorola RhoElements v2 licenses can be used in this case: device(with particular device UUID) and deployment(without link to particular device UUID).

After valid license is provided, device become 'Licensed'. Next time application started License screen will be displayed for short period with 'Device is Licensed.' message.

### License for non-Motorola devices
Deployment License information should be provided at application build time in build.yml:

    motorola_license_company: 'Deployment License Company name'
    motorola_license: 'Deployment License Number'

When application started, license is checked for validity. If license is invalid, application will exit.

## Barcode API

Get a list of scanners present on the device. Returns an array of hashes ('name','id').

	:::ruby
    Barcode.enumerate(url_for(:action => :enumerate_callback))

Callback parameters:

* scannerArray - array of Hashes("deviceName","friendlyName")
    
Enables the scanner. `barcode_callback` gets the same parameters as `Barcode.take_barcode`.

    :::ruby
    Barcode.enable(url_for(:action => :barcode_callback), {:deviceName=>deviceName_from_enumerate})

Callback parameters:

* "status" - "ok" or "cancel".
* "barcode" - the recognized barcode string.

Disables the currently enabled scanner. This reverts the scanner to its default state and flushes any current decoder settings.

    :::ruby    
    Barcode.disable

Performs a soft trigger start. If the scan does not result in a decode it is necessary to perform a soft stop before another soft start .  

    :::ruby    
    Barcode.start

Performs a soft trigger stop.

    :::ruby    
    Barcode.stop 

Enables the scanner and start scanner. Before the callback is called, the  scanner is disabled.

    :::ruby
    Barcode.take_barcode(url_for(:action => :barcode_callback), {:deviceName=>deviceName_from_enumerate})

The callback uses these parameters.

 * "status" - "ok" or "cancel"
 * "barcode" - recognized barcode string

### Sample

See controller and view in the /app/BarcodeRecognizerMoto folder of the [System API Samples application](http://github.com/rhomobile/rhodes-system-api-samples/tree/master/app/BarcodeRecognizerMoto/controller.rb) for more information.

## Motorola WebKit browser

RhoElements 2.0 will use the Motorola WebKit browser for Windows Mobile, Windows CE and Android (ET1) devices when you add the rhoelements app_type to your application's build.yml.

    app_type: rhoelements
    
To use Native (the platform built-in) Web Browser, and use the Motorola device capabilities such as Barcode, add the native browser capability to your applicaton's build.yml file.
    
    capabilities:
    - native_browser

To use the Motorola WebKit Browser on a non-Motorola Windows Mobile, Windows CE, or Android devices, add the Motorola browser capability to your application's build.yml file.

    capabilities:
    - motorola_browser

## RhoElements Shared Runtime

RhoElements 2.0 support developing applications in Shared Runtime mode.

* Shared Runtime contains all the RhoElements specific binaries and the Rhodes Ruby libraries.
* Shared Runtime contains all Native Extensions included at build time of Shared Runtime.
* Shared Runtime may contain a public folder with common files like JavaScripts, CSS, images, etc. RhoElements first looks in the application public folder, then it looks in the Shared Runtime public folder.
* The application bundle in Shared Runtime mode contains only application specific code and ruby extensions. (Native extensions should be included in Shared Runtime.)

**NOTE: RhoElements 2.0 Beta 4 supports Shared Runtime only for Windows Mobile and CE devices.**

Shared Runtime itself is a RhoElements application, so you can configure it and build for a specific OS.
 
### Building RhoElements Shared Runtime

On the command line, navigate to this folder.

	<RhoStudio>\ruby\lib\ruby\gems\1.8\gems\rhoelements-2.0.0\RhoElements2

To build for Windows Mobile or Windows CE, run this command.

        rake device:wm:production

The resulting `cab` file can be found at `<RhoStudio>\ruby\lib\ruby\gems\1.8\gems\rhoelements-2.0.0\RhoElements2\bin\target\<platform_id>\RhoElements2.cab`.

To build for Android, run this command.

        rake device:android:production

The resulting `apk` file can be found at `<RhoStudio>\ruby\lib\ruby\gems\1.8\gems\rhoelements-2.0.0\RhoElements2\bin\target\RhoElements2.apk`

### Installing RhoElements Shared Runtime

To install Shared Runtime on specific device follow the [build instructions](/rhodes/build).

NOTE: RhoElements Shared Runtime <b>must</b> be installed to the primary disk partition on the Windows CE/Mobile device, i.e. it has to be installed to `\Program Files\RhoElements2` only.
On Windows Mobile, the `Device` option must be selected when the installer asks for the location to install.
On Windows CE, the default path (`\Program Files\RhoElements2`) must be selected.

### Installing and Running RhoElements v2.0 Applications

To build RhoElements v2.0 application in Shared Runtime mode, add use_shared_runtime to your application's build.yml file.

    wm:
      use_shared_runtime: yes

All RhoStudio or rake commands will then automatically build your application in Shared Runtime mode.

* Windows CE and Windows Mobile: Follow the build instructions for [Windows Mobile](/rhodes/build#build-for-windows-mobile).
* Android ET1: Follow the build instructions for [Android](/rhodes/build#build-for-android).

NOTE: RhoElements v2.0 applications <b>must</b> be installed to the primary disk partition of Windows CE/Mobile device, i.e. they have to be installed to `\Program Files\&lt;app-name&gt;` only.
On Windows Mobile the `Device` option must be selected when the installer asks for the location to install.
On Windows CE the default path (`\Program Files\&lt;app-name&gt;`) must be selected.

### Shortcut for RhoElements Application in Shared Runtime Mode

If a RhoElements v2.0 application running in Shared Runtime mode is not a hidden app (i.e. there is no `hidden_app: yes` line at `build.yml`),
then on Windows Mobile or Windows CE the shortcut (`.lnk` file) containing the complete command line and icon path is created and placed to:

* _Start Menu_ if the application is installed from the `.cab` file or by a `rake run:wm:device:cab` command.
* _application folder_ if the application is installed by a `rake run:wm:device` command.

The generated `.lnk` is a standard Windows Mobile/CE shortcut file having the following format: 
`<line-length>#"<runtime-exe>" -approot="<app-folder>"?"<icon-path>"`

### RhoElements Shared Runtime Command Line Parameters

* RhoElements v2.0 applications should be deployed and run as described in the above sections.
* RhoElements v1.0 applications should be started using command line parameters.

Shared Runtime installation path on Windows CE/Mobile devices is `\Program Files\RhoElements2` and the path to the executable is `\Program Files\RhoElements2\RhoElements2.exe`.

The following command line parameters are supported by the RhoElements Shared Runtime (`RhoElements2.exe`):

    /C: Specifies the location of the configuration file for
        RhoElements v1.0 application,
        e.g. /C:file://\application\config.xml
        
    /S: Specifies the start page of the RhoElements v1.0 application,
        e.g. /S:file://\HTML\index.html
        e.g. /S:http://www.motorola.com
        
    -approot='<path-to-app>': Specifies the path to the root folder
        of the RhoElements v2.0 application,
        e.g. -approot='\Program Files\app'

If the `/C` parameter is present with no `/S` parameter, then the value from `Configuration` > `Applications` > `Application` > `General` > `StartPage` tag
of the configuration file will be used as the start page parameter.

If the `/S` parameter is present with no `/C` parameter, then the default configuration file from the runtime will be used to launch the application.

If neither the `/S` nor `/C` nor `-approot` parameters are present, then the value from `Configuration` > `Applications` > `Application` > `General` > `StartPage` tag of the RhoElements Shared Runtime configuration file will be used as the start page parameter (usually it points to 'Welcome to Motorola RhoElements' page).

### RhoElements Application Logging

1.  RhoElements Shared Runtime running <b>RhoElements v1.0</b> application writes its internal log to a file named `rholog.txt`.
The location of this file is defined by the following rules (in the order of priority):

    1. If the `Value` attribute of `Configuration` > `Logger` > `LogProtocol` tag in the configuration file equals "FILE" or "HTTP",
    then the path to the log file is taken from the `Configuration` > `Logger` > `LogURI` tag.
       - In case of "FILE" protocol, the file name part of `LogURI` is ignored and `rholog.txt` is used as a file name.
       - In case of "HTTP" protocol, the log messages are sent to the `LogURI` via POST HTTP-requests.

    2. If the start page parameter is a local file, then path to this file is used for log file `rholog.txt`
    (the file name part of the start page parameter is ignored and `rholog.txt` is used as the file name).

    3. Otherwise the log file `rholog.txt` is placed in the `rho` folder in the Shared Runtime installation folder.

2. When RhoElements Shared Runtime is running <b>RhoElements v2.0</b> application, the `rholog.txt` is placed to `rho` folder of the application folder.
It is possble to [configure logging](/rhodes/configuration#run-time-configuration) using the parameters in `rhoconfig.txt`.
It is also possible to [enable HTTP-logging](/rhodes/test-log-debug#logging) with a help of `rhologurl` parameter in `rhoconfig.txt`.
