
#Scanner Module
<span class="label label-info">HTML</span> <span class="label label-warning">JAVASCRIPT</span> <span class="label label-important">RUBY</span> <span class="label label-inverse">RHOELEMENTS</span>

<b>
The Scanner Module provides access to control the functionality of the device's scanner.
</b>

##Syntax

<table class="re-table"><tr><th class="tableHeading">scanner (Module) &lt;META&gt; Syntax
</th></tr><tr><td class="clsSyntaxCells clsOddRow"><p>&lt;META HTTP-Equiv="Scanner" content="[parameter / method]"&gt;</p></td></tr><tr><td class="clsSyntaxCells clsEvenRow"><p>&lt;META HTTP-Equiv="Scanner" content="DecodeEvent:url('[jsFunction | url]')"&gt;</p></td></tr></table>
<table class="re-table"><tr><th class="tableHeading">Scanner JavaScript Object Syntax:</th></tr><tr><td class="clsSyntaxCells clsOddRow">
By default the JavaScript Object <b>'scanner'</b> will exist on the current page and can be used to interact directly with the scanner.
</td></tr><tr><td class="clsSyntaxCells clsEvenRow">
To Invoke scanner methods via JavaScript use the following syntax: scanner.method();
<P />e.g. <b>scanner</b>.enumerate();
</td></tr><tr><td class="clsSyntaxCells clsOddRow">
To Set scanner parameters via JavaScript use the following syntax: scanner.parameter = 'value'; remembering to enclose your value in quotes where appropriate.  
<P />e.g. <b>scanner</b>.enabled = 'value';
</td></tr><tr><td class="clsSyntaxCells clsEvenRow">						
To Set scanner return events via JavaScript use the following syntax: scanner.event = Javascript Function;
<P />e.g. <b>scanner</b>.decodeEvent = 'doFunction(%json)';
<P />
For more details on the event syntax and parameters see the <a href="RetrievalEvents">Retrieval Events</a> page.
</td></tr><tr><td class="clsSyntaxCells clsOddRow">							
To set multiple <a href="../Resources/../Getting Started/EMMLOverview.html">EMML</a> parameters / events on a single line use the following syntax: scanner.setEMML("[Your EMML Tags]");
<P />
e.g. <b>scanner</b>.setEMML("enabled:<i>value</i>;decodeEvent:url('JavaScript:doFunction(%json)');enumerate");							
</td></tr></table>

<table class="re-table"><tr><th class="tableHeading">Scanner Ruby Object Syntax:</th></tr><tr><td class="clsSyntaxCells clsOddRow">
By default the Ruby Object <b>'Scanner'</b> will exist on the current page and can be used to interact directly with the Scanner. All Methods, Parameters and Events are the same as Javascript, however, notice <b>'Scanner'</b> needs to start with an uppercase letter. Another difference in Ruby is that methods do not end in <b>'()'</b></td></tr><tr><td class="clsSyntaxCells clsEvenRow">
To Invoke Scanner methods via Ruby use the following syntax: Scanner.method()
<P />e.g. <b>Scanner</b>.enumerate</td></tr><tr><td class="clsSyntaxCells clsOddRow">
To Set Scanner parameters via Ruby use the following syntax: Scanner.parameter = 'value' remembering to enclose your value in quotes where appropriate.  
<P />e.g. <b>Scanner</b>.enabled = 'value'
</td></tr><tr><td class="clsSyntaxCells clsEvenRow">						
To Set Scanner return events via Ruby use the following syntax: Scanner.event = url_for(:action =&gt; :event_callback) 
<P />e.g. <b>Scanner</b>.decodeEvent = url_for(:action =&gt; :scanner_event_callback)
<P />
For more details on the event syntax and parameters see the <a href="RetrievalEvents">Retrieval Events</a> page.
</td></tr><tr><td class="clsSyntaxCells clsOddRow" /></tr></table>



##Methods


Items listed in this section indicate methods or, in some cases, indicate parameters which will be retrieved.

<table class="re-table"><col width="10%" /><col width="68%" /><col width="22%" /><tr><th class="tableHeading">Name</th><th class="tableHeading">Description</th><th class="tableHeading">Default Value</th></tr><tr><td class="clsSyntaxCells clsOddRow"><b>enumerate</b></td><td class="clsSyntaxCells clsOddRow">Return a list of scanners present on the device via EnumScannerEvent.  This tag will be actioned immediately and should be called via JavaScript.</td><td class="clsSyntaxCells clsOddRow">
N/A
</td></tr><tr><td class="clsSyntaxCells clsEvenRow"><b>enable</b></td><td class="clsSyntaxCells clsEvenRow">Enables the default scanner if no scanner is currently enabled.</td><td class="clsSyntaxCells clsEvenRow">Device specific</td></tr><tr><td class="clsSyntaxCells clsOddRow"><b>disable</b></td><td class="clsSyntaxCells clsOddRow">Disables the currently enabled scanner.  This reverts the scanner to its default state and flushes any current decoder settings.</td><td class="clsSyntaxCells clsOddRow">Device specific</td></tr><tr><td class="clsSyntaxCells clsEvenRow"><b>start</b></td><td class="clsSyntaxCells clsEvenRow">Performs a soft trigger start.  If the scan does not result in a decode it is necessary to perform a soft stop before another soft start.</td><td class="clsSyntaxCells clsEvenRow">
N/A
</td></tr><tr><td class="clsSyntaxCells clsOddRow"><b>stop</b></td><td class="clsSyntaxCells clsOddRow">Performs a soft trigger stop</td><td class="clsSyntaxCells clsOddRow">
N/A
</td></tr></table>

##Parameters


Items listed in this section indicate parameters, or attributes which can be set.
<table class="re-table"><col width="20%" /><col width="20%" /><col width="38%" /><col width="22%" /><tr><th class="tableHeading">Name</th><th class="tableHeading">Description</th></tr><tr><td class="clsSyntaxCells clsOddRow"><b>enabled:[Value]
</b></td><td class="clsSyntaxCells clsOddRow">Enables the specified scanner.<br />Possible Values:ID of Scanner, obtained via EnumScanner<br /><br /><i>Default: SCN1</i></td></tr><tr><td class="clsSyntaxCells clsEvenRow"><b>[Decoder Name]:[Value]
</b></td><td class="clsSyntaxCells clsEvenRow">Sets each Decoders' parameters.  Refer to the "Decoders" Section of this help file to know available decoders and Their Parameters<br />Possible Values:Decoder Property<br /><br /><i>Default: Refer to the "Decoders" Section</i></td></tr><tr><td class="clsSyntaxCells clsOddRow"><b>autoEnter:[Value]
</b></td><td class="clsSyntaxCells clsOddRow">If "enabled" then automatically append an Enter to the end of any barcodes scanned.  This feature is only available when a decodeEvent is not specified and is useful for submitting forms.  See Remarks.<br />Possible Values:'enabled' / 'disabled'<br /><br /><i>Default: 'Disabled'</i></td></tr><tr><td class="clsSyntaxCells clsEvenRow"><b>autoTab:[Value]
</b></td><td class="clsSyntaxCells clsEvenRow">If "enabled" then automatically appends a Tab to the end of any barcodes scanned.  This feature is only available when a decodeEvent is not specified and is useful for advancing to the next input field.  See Remarks.<br />Possible Values:'enabled' / 'disabled'<br /><br /><i>Default: Disabled</i></td></tr><tr><td class="clsSyntaxCells clsOddRow"><b>linearSecurityLevel:[Value]
</b></td><td class="clsSyntaxCells clsOddRow">Describes the linear security level used during decoding.  Possible values:

redundancyAndLength:
  Two times redundancy based on redundancy flags and code length.
shortOrCodabar:
  Two times redundancy if short barcode or Codabar.
longAndShort:
  Two times redundancy for long barcodes, three times for short barcodes.
allTwice:
  Two times redundancy for all barcodes.  
allThrice:
  Three times redundancy for all barcodes.<i>Applicable scanner types: Laser and Imager</i><br /><i>Default: Device specific</i></td></tr><tr><td class="clsSyntaxCells clsEvenRow"><b>scanTimeout:[Value]
</b></td><td class="clsSyntaxCells clsEvenRow">Maximum time in milliseconds that laser scanners will emit a beam or imager scanners will enable the imager.  A value of 0 indicates an infinite timeout.  This parameter is compatibile with aimType:trigger, aimType:timedHold, aimType:timedRelease and aimType:pressAndRelease.  Note that for regulatory reasons scanTimeout is not configurable on all laser scanners.<br />Possible Values:milliseconds<br /><i>Applicable scanner types: Laser and Imager</i><br /><i>Default: 5000 (Laser), 15000 (Imager)</i></td></tr><tr><td class="clsSyntaxCells clsOddRow"><b>rasterMode:[Value]
</b></td><td class="clsSyntaxCells clsOddRow">Describes the type of vertical rastering to use.  Possible Values:

none:
  No vertical rastering.
openAlways:
  Vertical rastering is always full open.  To adjust the rastering height use the rasterHeight property.
smart:
  Vertical rastering mode is 'Smart'.
cyclone:
  Vertical rastering mode is 'Cyclone'.<i>Applicable scanner types: Laser Only</i><br /><i>Default: Device specific</i></td></tr><tr><td class="clsSyntaxCells clsEvenRow"><b>rasterHeight:[Value]
</b></td><td class="clsSyntaxCells clsEvenRow">Vertical rastering height to use, as a percentage, when rasterMode:openAlways is applied.<br />Possible Values:0 - 100<br /><i>Applicable scanner types: Laser Only</i><br /><i>Default: Device specific</i></td></tr><tr><td class="clsSyntaxCells clsOddRow"><b>aimType:[Value]
</b></td><td class="clsSyntaxCells clsOddRow">Describes the type of aiming to use.  Possible values:

trigger:
  Standard trigger mode.  Holding the trigger will start a decoding session.  
  The decoding session ends when a barcode is decoded, scanTimeout occurs or the trigger is released.
timedHold:
  Aiming lasts for the time specified by 'timedAimDuration' before decoding.  
  The decode will last until the barcode is decoded or scanTimeout occurs.
timedRelease:
  Aiming lasts until trigger is released.  
  If the timedAimDuration has expired when the trigger is released then a decode session is started
  until a barcode is decoded or for the remaining time equal to the scanTimeout value.
presentation:
  Provided to support Kiosk devices.  The scanner illuminates when movement is detected in the range
  of the scanner window.  In order to use this mode the scanner must be initiated with a softscan
  using the scanner.start() method and again after each decode.  The device must be equipped with a 
  sensor to detect movement to use presentation mode.  See examples below.  
pressAndRelease:
  Scan will continue after the trigger is released until scanTimeout occurs.
continuousRead:	
  Once the trigger is pulled barcodes will continue to be scanned whilst the trigger
  is held, enabling rapid scanning, to be used in conjunction with sameSymbolTimeout 
  and differentSymbolTimeout.  This value is ignored if viewfinderMode is set to 
  'dynamicReticle'<i>Applicable scanner types: Laser and Imager</i><br /><i>Default: Device specific</i></td></tr><tr><td class="clsSyntaxCells clsEvenRow"><b>timedAimDuration:[Value]
</b></td><td class="clsSyntaxCells clsEvenRow">Duration in milliseconds for aimType:timedHold and aimType:timedRelease<br />Possible Values:milliseconds<br /><i>Applicable scanner types: Laser and Imager</i><br /><i>Default: Device specific</i></td></tr><tr><td class="clsSyntaxCells clsOddRow"><b>sameSymbolTimeout:[Value]
</b></td><td class="clsSyntaxCells clsOddRow">When the aimType:continuousRead property is applied this value defines the interval between which the same barcode can be decoded twice.  The value is specified in milliseconds, use 0 to indicate no interval between successive reads.  Use this value to prevent accidental duplicate scans.<br />Possible Values:milliseconds<br /><i>Applicable scanner types: Laser and Imager</i><br /><i>Default: 2500</i></td></tr><tr><td class="clsSyntaxCells clsEvenRow"><b>differentSymbolTimeout:[Value]
</b></td><td class="clsSyntaxCells clsEvenRow">When the aimType:continuousRead property is applied this value defines the interval between which different barcodes can be scanned.  The value is specified in milliseconds, use 0 to indicate no interval between successive reads.  Use this setting to allow time for the operator to reaim the device between successive scans.<br />Possible Values:milliseconds<br /><i>Applicable scanner types: Laser and Imager</i><br /><i>Default: 500</i></td></tr><tr><td class="clsSyntaxCells clsOddRow"><b>aimMode:[Value]
</b></td><td class="clsSyntaxCells clsOddRow">Describes the aiming mode to used.  Possible values:

none:
  No Aiming (Can be overridden by picklistMode).  
dot:
  Laser barcode readers will show a dot for aiming.
slab:
  Laser barcode readers will show a slab for aiming.
reticle:
  Imager barcode readers will show a reticle for aiming<i>Applicable scanner types: Laser and Imager</i><br /><i>Default: Device specific</i></td></tr><tr><td class="clsSyntaxCells clsEvenRow"><b>picklistMode:[Value]
</b></td><td class="clsSyntaxCells clsEvenRow">Allows the imager to decode only the barcode that is directly under the cross-hair / center of the reticle.  This feature is most useful in applications where multiple barcodes may appear in the field of view during a decode session and only one of them is targeted for decode.  When enabled picklistMode will override aimMode if no aiming is chosen and use aimMode:reticle.  This mode will also interact with viewfinderMode, see the EMDK for C help file for more information.  Enabling picklist mode may adversely affect overall decoding performance.  Possible values:

disabled:
  Disables picklist mode so any barcode within the field of view can be decoded.
hardwareReticle: (not available on Enterprise Tablet)
  Enables picklist mode so that only the barcode under the projected reticle can 
  be decoded.  If the imager does not support a projected reticle then the 
  behaviour is the same as softwareReticle.
softwareReticle:
  Enables picklist mode so that only the barcode in the center of the image is 
  decoded.  This is most useful when used in conjunction with static and 
  dynamic reticle viewfinder modes.<i>Applicable scanner types: Imager Only</i><br /><i>Default: Device specific</i></td></tr><tr><td class="clsSyntaxCells clsOddRow"><b>viewfinderMode:[Value]
</b></td><td class="clsSyntaxCells clsOddRow">Configures the mode of the scanner viewfinder window.  This attribute is not supported on all Scanners and will interact with the picklistMode parameter, see the EMDK for C help file for more information.    Possible values:

enabled:
  Only the viewfinder is enabled (not the reticle).  Displays a viewfinder on the
  screen showing the image being captured by the camera.
disabled: (not available on Enterprise Tablet)
  The viewfinder will not be displayed during aiming or scanning.
staticReticle:
  Displays the viewfinder as well as draws a red reticle in the center of the image
  which helps with tracking the barcode.
dynamicReticle: (not available on Enterprise Tablet)
  Displays the viewfinder as well as draws a red reticle in the center of the image.
  If the barcode in the image is 'decodable' the reticle turns green to indicate
  this.  This mode requires a second trigger press to decode the barcode after the
  reticle turns green.<i>Applicable scanner types: Imager Only</i><br /><i>Default: Device specific</i></td></tr><tr><td class="clsSyntaxCells clsEvenRow"><b>viewfinderX:[Value]
</b></td><td class="clsSyntaxCells clsEvenRow">When scanning a barcode using an imager scanner the viewfinder preview window will appear this number of pixels from the left hand side of the screen.  The images displayed in the viewfinder will be scaled as appropriate.<br />Possible Values:pixels<br /><i>Applicable scanner types: Imager Only</i><br /><i>Default: Device specific</i></td></tr><tr><td class="clsSyntaxCells clsOddRow"><b>viewfinderY:[Value]
</b></td><td class="clsSyntaxCells clsOddRow">When scanning a barcode using an imager scanner the viewfinder preview window will appear this number of pixels from the top of the screen.  The images displayed in the viewfinder will be scaled as appropriate.<br />Possible Values:pixels<br /><i>Applicable scanner types: Imager Only</i><br /><i>Default: Device specific</i></td></tr><tr><td class="clsSyntaxCells clsEvenRow"><b>viewfinderWidth:[Value]
</b></td><td class="clsSyntaxCells clsEvenRow">When scanning a barcode using an imager scanner the viewfinder preview window will be this number of pixels wide.  The images displayed in the viewfinder will be scaled as appropriate.<br />Possible Values:pixels<br /><i>Applicable scanner types: Imager Only</i><br /><i>Default: Device specific</i></td></tr><tr><td class="clsSyntaxCells clsOddRow"><b>viewfinderHeight:[Value]
</b></td><td class="clsSyntaxCells clsOddRow">When scanning a barcode using an imager scanner the viewfinder preview window will be this number of pixels high.  The images displayed in the viewfinder will be scaled as appropriate.<br />Possible Values:pixels<br /><i>Applicable scanner types: Imager Only</i><br /><i>Default: Device specific</i></td></tr><tr><td class="clsSyntaxCells clsEvenRow"><b>viewfinderFeedback:[Value]
</b></td><td class="clsSyntaxCells clsEvenRow">Configures the feedback given after a successful scan in milliseconds.  This value is ignored if aimType is set to continuousRead and no feedback will be given.  Possible values:

disabled:
  No feedback is given after a successful decode.
enabled:
  The last image that was successfully decoded is displayed.  The time for which
  the image is displayed can be configured by the viewfinderFeedbackTime parameter.
reticle:
  The last image that was successfully decoded is displayed along with a red reticle 
  in the center of the image.  The time for which the image is displayed can be 
  configured by the viewfinderFeedbackTime parameter.<i>Applicable scanner types: Imager Only</i><br /><i>Default: Device specific</i></td></tr><tr><td class="clsSyntaxCells clsOddRow"><b>viewfinderFeedbackTime:[Value]
</b></td><td class="clsSyntaxCells clsOddRow">If the viewfinderFeedback:enabled or viewfinderFeedback:reticle are applied then the decoded barcode will remain on the screen for this duration.<br />Possible Values:milliseconds<br /><i>Applicable scanner types: Imager Only</i><br /><i>Default: Device specific</i></td></tr><tr><td class="clsSyntaxCells clsEvenRow"><b>focusMode:[Value]
</b></td><td class="clsSyntaxCells clsEvenRow">Sets the focus mode in use.  Possible values:

fixed:
  Use fixed focus.
auto:
  Use auto focus.<i>Applicable scanner types: Imager Only</i><br /><i>Default: Device specific</i></td></tr><tr><td class="clsSyntaxCells clsOddRow"><b>illuminationMode:[Value]
</b></td><td class="clsSyntaxCells clsOddRow">Selects the illumination mode to use.  Possible values:

auto:(not available on Enterprise Tablet)
  Auto-exposure algorithms will decide whether illumination is required or not.
alwaysOn:
  External illumination is always on.
alwaysOff:
  External illumination is always off.<i>Applicable scanner types: Imager Only</i><br /><i>Default: Device specific</i></td></tr><tr><td class="clsSyntaxCells clsEvenRow"><b>dpmMode:[Value]
</b></td><td class="clsSyntaxCells clsEvenRow">Allows Direct Part Marking (DPM) barcodes to be read when true but may adversely affect overall decoding performance.  DPM is a way of stamping barcodes directly on physical objects and is only available on DPM terminals.<br />Possible Values:true / false<br /><i>Applicable scanner types: Imager Only</i><br /><i>Default: Device specific</i></td></tr><tr><td class="clsSyntaxCells clsOddRow"><b>inverse1dMode:[Value]
</b></td><td class="clsSyntaxCells clsOddRow">Allows the user to select inverse 1D barcodes for decoding.  Possible values:

enabled:
  Inverse 1D symbology decoding is enabled.
disabled:
  Inverse 1D symbology decoding is disabled.
auto:  
  Allows decoding of both positive and inverse 1D symbologies<i>Applicable scanner types: Imager Only</i><br /><i>Default: Device specific</i></td></tr><tr><td class="clsSyntaxCells clsEvenRow"><b>poorQuality1dMode:[Value]
</b></td><td class="clsSyntaxCells clsEvenRow">Allows poor quality 1D barcodes to be read when true but this will adversely affect the overall decoding performance.<br />Possible Values:true / false<br /><i>Applicable scanner types: Imager Only</i><br /><i>Default: Device specific</i></td></tr><tr><td class="clsSyntaxCells clsOddRow"><b>narrowBeam:[Value]
</b></td><td class="clsSyntaxCells clsOddRow">Enables or disables narrow beam width.<br />Possible Values:true / false<br /><i>Applicable scanner types: Laser Only</i><br /><i>Default: Device specific</i></td></tr><tr><td class="clsSyntaxCells clsEvenRow"><b>dbpMode:[Value]
</b></td><td class="clsSyntaxCells clsEvenRow">Describes the type of Digital Bar Pulse (DBP) being produced by the scan engine.  Possible values:

normal:
  Tells the engine to produce normal DBP.
composite:
  Tells the engine to produce composite DBP, which is 2 different sets of DBP data 
  multiplexed together for better decode performance.  In order to enable this mode 
  it must be supported by the scanner.<i>Applicable scanner types: Laser Only</i><br /><i>Default: Device specific</i></td></tr><tr><td class="clsSyntaxCells clsOddRow"><b>klasseEins:[Value]
</b></td><td class="clsSyntaxCells clsOddRow">Enables or disables the Klasse Eins laser on time function.<br />Possible Values:true / false<br /><i>Applicable scanner types: Laser Only</i><br /><i>Default: Device specific</i></td></tr><tr><td class="clsSyntaxCells clsEvenRow"><b>adaptiveScanning:[Value]
</b></td><td class="clsSyntaxCells clsEvenRow">Enables or disables adaptive scanning.  When set to true, the scan engine will automatically toggle between 2 scan angles, wide and narrow, allowing the scan engine to decode barcodes both in close proximity and far away (~100 inches).  Adaptive scanning is only supported in high performance, long working range scan engines such as SE960.<br />Possible Values:true / false<br /><i>Applicable scanner types: Laser Only</i><br /><i>Default: Device specific</i></td></tr><tr><td class="clsSyntaxCells clsOddRow"><b>bidirectionalRedundancy:[Value]
</b></td><td class="clsSyntaxCells clsOddRow">Enables or disables bidirectional redundancy.<br />Possible Values:true / false<br /><i>Applicable scanner types: Laser Only</i><br /><i>Default: Device specific</i></td></tr><tr><td class="clsSyntaxCells clsEvenRow"><b>connectionIdleTimeout:[Value]
</b></td><td class="clsSyntaxCells clsEvenRow">Specifies the time, in seconds, that an external scanner will be allowed to remain idle before the connection is terminated to conserve power.<br />Possible Values:seconds<br /><i>Applicable scanner types: Bluetooth Only</i><br /><i>Default: Device specific</i></td></tr><tr><td class="clsSyntaxCells clsOddRow"><b>disconnectBtOnDisable:[Value]
</b></td><td class="clsSyntaxCells clsOddRow">Forces the scanner to disconnect from the terminal when it is 'disabled'.  Since the scanner is disabled when you navigate to a new page, set this value to false if you want to maintain the bluetooth connection to your remote scanner.<br />Possible Values:true / false<br /><i>Applicable scanner types: Bluetooth Only</i><br /><i>Default: false</i></td></tr></table>
<table class="re-table"><col width="78%" /><col width="8%" /><col width="1%" /><col width="5%" /><col width="1%" /><col width="5%" /><col width="2%" /></table>
##Events


Values are returned to the caller in RhoElements via Events.  Most modules contain events and those returned from this module are given below along with the event parameters.  Events can cause a navigation to a new URL or a Javascript function on the page to be invoked.  Each event will in most cases have a number of parameters associated with it which will either be strings or javascript arrays.  Event parameters can be accessed either directly or via JSON objects.

<br />
###decodeEvent
A decode event is sent by the Scanner whenever a barcode is decoded.<table class="re-table"><col width="3%" /><col width="20%" /><col width="77%" /><tr><th class="tableHeading">ID</th><th class="tableHeading">Name</th><th class="tableHeading">Description</th></tr><tr><td style="text-align:left;" class="clsSyntaxCells clsOddRow">1</td><td style="text-align:left;" class="clsSyntaxCells clsOddRow"><b>data</b></td><td style="text-align:left;" class="clsSyntaxCells clsOddRow">The data decoded by the scanner or imaging device</td></tr><tr><td class="clsSyntaxCells clsEvenRow" style="text-align:left;">2</td><td class="clsSyntaxCells clsEvenRow" style="text-align:left;"><b>source</b></td><td class="clsSyntaxCells clsEvenRow" style="text-align:left;">The source device and human readable decoder type of the decoded barcode or symbol</td></tr><tr><td style="text-align:left;" class="clsSyntaxCells clsOddRow">3</td><td style="text-align:left;" class="clsSyntaxCells clsOddRow"><b>type</b></td><td style="text-align:left;" class="clsSyntaxCells clsOddRow">Hex value representing the decoder type</td></tr><tr><td class="clsSyntaxCells clsEvenRow" style="text-align:left;">4</td><td class="clsSyntaxCells clsEvenRow" style="text-align:left;"><b>time</b></td><td class="clsSyntaxCells clsEvenRow" style="text-align:left;">The time at which the decode occurred (hh:mm:ss)</td></tr><tr><td style="text-align:left;" class="clsSyntaxCells clsOddRow">5</td><td style="text-align:left;" class="clsSyntaxCells clsOddRow"><b>length</b></td><td style="text-align:left;" class="clsSyntaxCells clsOddRow">The length of the decoded barcode or symbol</td></tr><tr><td class="clsSyntaxCells clsEvenRow" style="text-align:left;">6</td><td class="clsSyntaxCells clsEvenRow" style="text-align:left;"><b>event</b></td><td class="clsSyntaxCells clsEvenRow" style="text-align:left;">The type of event which has occurred at the scanner.  This field will be either 'Decode' for barcode scanning or a message from a Bluetooth scanner.  See Remarks</td></tr></table>
<br />
###bluetoothStatusEvent
A bluetoothStatusEvent is sent whenever a bluetooth connection / disconnection event occurs. If you are connected to a bluetooth scanner and have not registered to receive this event the status message will be sent as the sixth return value of the decodeEvent.<table class="re-table"><col width="3%" /><col width="20%" /><col width="77%" /><tr><th class="tableHeading">ID</th><th class="tableHeading">Name</th><th class="tableHeading">Description</th></tr><tr><td style="text-align:left;" class="clsSyntaxCells clsOddRow">1</td><td style="text-align:left;" class="clsSyntaxCells clsOddRow"><b>status</b></td><td style="text-align:left;" class="clsSyntaxCells clsOddRow">The message describing the bluetooth connection, see remarks.</td></tr></table>
<br />
###enumScannerEvent
The Enum Scanner Event is used to ascertain the scanners present on the device.<table class="re-table"><col width="3%" /><col width="20%" /><col width="77%" /><tr><th class="tableHeading">ID</th><th class="tableHeading">Name</th><th class="tableHeading">Description</th></tr><tr><td style="text-align:left;" class="clsSyntaxCells clsOddRow">1</td><td style="text-align:left;" class="clsSyntaxCells clsOddRow"><b>scannerArray (deviceName, friendlyName)</b></td><td style="text-align:left;" class="clsSyntaxCells clsOddRow">2 dimensional array of scanners present on the device.  See remarks.</td></tr></table>




##Remarks


###General
If the Scanner Meta Tag is used without DecodeEvent, the data will be output as keystrokes. On unlicensed devices it is not recommended to enable the Scanner on the application's startup page, this can interfere with the the license screen.


###Scanning and Image Capture Interaction
In some device configurations the scanner and imager share the same hardware, e.g. the blockbuster scanner and top mounted imager on the MC75a. Where two modules share the same physical hardware they cannot be enabled simultaneously, once the scanner is enabled it must be disabled before the imager can be used, and vice versa.


###AutoEnter and AutoTab
AutoEnter and AutoTab are mutually exclusive, only one can be enabled at any one time. If both are enabled then AutoEnter will take priority.


###Bluetooth Scanner Overview
Once associated with the Device a Bluetooth Scanner will remain associated even after losing the BT connection. In order to associate a different Bluetooth scanner with the device it is necessary to scan the 'unpairing' barcode and then invoke the 'disabled' meta tag followed by the 'enabled' meta tag, this will allow you to scan the BT association barcode with a different scanner. You can override this default behaviour using the disconnectBtOnDisable parameter.

<pre>

The following messages will be received from the Bluetooth Scanner in the bluetoothStatus event:

* 'BTScanAssociationBarcode' 
   Means the device is ready to be associated with a BT scanner.  You must scan the 
   association barcode.  It is only necessary to scan the association 
   barcode when you first associate a scanner with the device, this pairing will be remembered until
   you scan the unpairing barcode.

* 'BluetoothConnected'
   The remote scanner has successfully connected to the device.
	
* 'BluetoothDisconnected'
   The remote scanner has become disconnected from the device, this may be due to loss of battery, being out
   of range or scanning the 'unpairing' barcode.  The scanner will attempt to reconnect automatically for
   a period of time once it regains power or goes out of range, if it fails to reconnect after the specified
   timeout the reconnect button on the device should be pushed.  Once the unpairing barcode is scanned
   it is necessary to disable the scanner and then re-enable it before another scanner can be associated.
</pre>


###ScannerArray attribute
The ScannerArray attribute returned from Scanner tag with parameter "EnumScannerEvent" will enumerate each scanner present on the device in a 2D array, associating each scanner's device name with a user friendly name. The device ID can be passed as a parameter to "Scanner" "Enabled:&lt;deviceID&gt;", the friendly name is a user readable description of the scanner, e.g:

<pre>

"SCN1", "1D Scanner Driver"
"SCN2", "Camera"
"SCN3", "Bluetooth SSI Scanner Driver"
</pre>


###Viewfinder Position Parameters
The scanner viewfinder window is not infinitely resizable, when setting ViewFinderX, ViewFinderY, ViewFinderWidth and ViewFinderHeight ensure you do not exceed the size of the screen and it is recommended to use the same aspect ratio as your device. For applications designed to handle screen rotation it is recommended to use a scan window whose longest side will fit within both the screen width and screen height. If your viewfinder position fails to be applied it is recommended you query your log file to see which parameter is causing trouble, or reposition the window away from the edges of the screen.


###DataWedge Interaction With Native Apps
In order to use the scanner with RhoElements Native Apps you will need to either disable DataWedge or create a DataWedge profile for your app.

<pre>
DISABLING DATAWEDGE
1.	Start the DataWedge app
2.	Click the menu button &gt; "Settings" and untick "DataWedge enabled". 
RHOELEMENTS DATAWEDGE PROFILE
1.	Install your RhoElements native app,
2.	Start the DataWedge app
3.	Click the menu button &gt; "New Profile" and enter a name,
4.	Click on the link to the new profile in the profile list,
5.	Click on "Associated apps" in the "Applications" section,
6.	Click the menu button &gt; "New app/activity",
7.	Select the package name for your app,
8.	Select "*",
9.	Click the "Back" capacitive button,
10.	Make sure the "Profile enabled" checkbox is ticked.
11.	Uncheck all three "Enabled" checkboxes under the sections of:
	"Barcode input", "Keystroke output" and "Intent output".
</pre>


<table class="re-table"><tr><th class="tableHeading">Supported Devices</th><td class="clsSyntaxCell clsOddRow">All supported devices that have a scanner component. Enterprise Tablet only supports the following parameters: enabled, [Decoder Name], autoEnter, autoTab, illuminationMode, linearSecurityLevel, picklistMode, scanTimeout, viewfinderMode.  Note that not all parameters will be supported by all scanner engines, e.g. Inverse1D barcodes are not supported on the MK4000</td></tr><tr><th class="tableHeading">Persistence</th><td class="clsSyntaxCell clsEvenRow">Transient - The scanner is disabled when navigating to a new page or refreshing the current page.  Disabling and Re-enabling the scanner may reset some parameters back to their device default.  The Motorola utility CtlPanel, available as a separate download, can be used to configure the default state of the scanner.</td></tr><tr><th class="tableHeading">Minimum Requirements</th><td class="clsSyntaxCell clsOddRow">None.</td></tr></table>


##Examples

The following example enables the scanner, turns on autoenter and performs a soft trigger start:

	<META HTTP-Equiv="scanner" Content="Enable">
	<META HTTP-Equiv="scanner" Content="AutoEnter:Enabled">
	<META HTTP-Equiv="scanner" Content="Start">
	
The following example sets up the scanner on a page to submit the scanned data to an asp page upon successful decoding

	<META HTTP-Equiv="scanner" Content="enabled">
	<META HTTP-Equiv="scanner" Content="DecodeEvent:url('mypage.asp?Data=%s&Source=%s&Type=%s&Time=%s&Length=%s')">
	
The following example sets up the scanner on a page to call a javascript function upon successful decoding:

	<META HTTP-Equiv="scanner" Content="enable">
	<META HTTP-Equiv="scanner" Content="DecodeEvent:url('javascript:doScan(%json);')">
	
	<script>
	   function doScan(jsonObject)
	   {
	      if(jsonObject.type == 0x35) //ean 13
	      {
	         alert('Please scan a non EAN 13 code!');
	      }
	      else
	      {
	         alert('You scanned: ' + jsonObject.data);
	      }
	   }
	</script>
	
The following example demonstrates how to set a device into presentation mode.

	<HTML>
	<HEAD>
	  <Meta http-equiv="scanner" content="aimType:presentation">
	  <Meta http-equiv="scanner" content="DecodeEvent:url('Javascript:doScan('%s');')">
	  <Meta http-equiv="scanner" content="enable">
	</HEAD>
	<BODY onLoad="doSoftScan();">
	  <SCRIPT LANGUAGE="JavaScript">
	
	    function doSoftScan()
	    {
		    scanner.start();
	    }
	
	    function doScan(jsonObject)
	    {
		    bcode.innerHTML = jsonObject.data;
		    doSoftScan();
		}
	  </SCRIPT>
	  <div id="bcode"></div>
	</BODY>
	</HTML>
	
	
The following example shows how an application might handle a Bluetooth Scanner whose ID is SCN2:

	<HTML>
	<HEAD>
	<!-- Status Updates are received via bluetoothStatusEvent -->
	<META HTTP-Equiv="Scanner" Content="BluetoothStatusEvent:url('Javascript:BTStatusFunc(%json);')">
	<META HTTP-Equiv="Scanner" Content="DecodeEvent:url('Javascript:ScanFunc(%json);')">
	<!-- Enable the Bluetooth Scanner, this will commence the BT pairing -->
	<META HTTP-Equiv="Scanner" Content="Enabled:SCN2">
	</HEAD>
	
	Barcode Data: <DIV ID="bcode"> </DIV>
	User Message: <DIV ID="message"> </DIV>
	<P><INPUT TYPE="button" VALUE="Change Associated Scanner" ONCLICK="onChangeScanner();"></P>
	</BODY>
	</HTML>
	
	<SCRIPT LANGUAGE="JavaScript">
	
	//  Whether or not the next barcode data we receive will be the unpairing barcode
	var expectingUnpairingBarcode = false;
	
	function ScanFunc(jsonObject)
	{
		//  Output the scanned barcode
		bcode.innerHTML = data;
	}
	
	function BTStatusFunc(jsonObject)
	{
		if (expectingUnpairingBarcode)
		{
			//  restart the scanner component so it is ready
			//  to accept a different Bluetooth Scanner
			expectingUnpairingBarcode = false;
			scanner.disable();
			scanner.enabled = 'SCN2';
			return;
		}
		
		if (jsonObject.status == 'BTScanAssociationBarcode')
		{
			//  Instruct the User to scan the association barcode
			alert('Scan Association Barcode');
		}
		else if(jsonObject.status == 'BluetoothConnected')
		{
			message.innerHTML = "Bluetooth Scanner Connected";
		}
		else if(jsonObject.status == 'BluetoothDisconnected')
		{
			message.innerHTML = "Bluetooth Disconnected, Please Reconnect";
		}
	}
	
	function onChangeScanner()
	{
		//  Change the BT Scanner associated with the device, the logic to do this is handled
		//  once the 'unpairing' barcode is scanned.
		message.innerHTML = "Please Scan Unpairing Barcode";
		expectingUnpairingBarcode = true;
	}
	</SCRIPT>
	
	
The following example displays the available scanners on screen and enables the Bluetooth Scanner (if available)

	<HTML>
	<HEAD>
	<META HTTP-Equiv="Scanner" Content="DecodeEvent:url('Javascript:ScanFunc(%json);')">
	<META HTTP-Equiv="Scanner" Content="BluetoothStatusEvent:url('Javascript:BTFunc(%json);')">
	<META HTTP-Equiv="Scanner" Content="EnumScannerEvent:url('Javascript:EnumScanners(%json);')">
	</HEAD>
	
	<BODY onLoad="setEnumScannerTimer();">
	<DIV ID="message"></DIV>
	</BODY>
	</HTML>
	
	<SCRIPT LANGUAGE="JavaScript">
	function ScanFunc(jsonObject) {message.innerHTML = jsonObject.data;}
	
	function BTFunc(jsonObject) {message.innerHTML = jsonObject.status;}
	
	function EnumScanners(jsonObject)
	{
		var scannerInfo = "Scanners On Device: " + jsonObject.scannerArray.length + "<BR>ID  --  Name<BR>" 
		for (i=0; i < jsonObject.scannerArray.length; i++)
		{
			scannerInfo = scannerInfo + jsonObject.scannerArray[i].deviceName + ' -- '
			+ jsonObject.scannerArray[i].friendlyName + '<BR>';
			//  See if this is the Bluetooth Scanner
			if (jsonObject.scannerArray[i].friendlyName.indexOf("Bluetooth") >= 0)
			{
				//  This is the Bluetooth Scanner, Enable it
				scanner.enabled = jsonObject.scannerArray[i].deviceName;
			}
		}
		message.innerHTML = scannerInfo;
	}
	
	//  Wait for the DOM to fully load before we enumerate the scanners
	function setEnumScannerTimer()
	{
	    setTimeout("onScannerEnable()", 3000);
	}
	function onScannerEnable()
	{
		scanner.enumerate();
	}
	</SCRIPT>
	


