# RhoElements 2.0 Native and Hybrid Applications

RhoElements 2.0 supports Barcode, WebKit Browser, and many other device capabilities for Motorola Windows Mobile, Windows CE and Android(ET1) devices.

## Supported Operating Systems

Windows Mobile, Windows CE, Android, iOS, and BlackBerry. Realtime barcoding and automatic device encryption are relevant on all of these operating systems.

## Installing the RhoElements Development Environment

Download and install the latest [RhoStudio for Windows](/rhodes/install#windows) or the RhoElements gem with the Rhodes latest beta.

## Creating a RhoElements 2.0 Native Application

A RhoElements 2.0 native application uses the [RhoElements libraries](/rhoelements/developersreference) to run the functionalities on Motorola devices.

To create a RhoElements native application, follow the same steps you would to create a Rhodes application. RhoElements 2.0 uses the Rhodes framework, with native APIs for Motorola devices. You will edit your build.yml file to enable it to use the RhoElements Motorola device capabilities devices, and to allow you to build your application on Windows or Android devices.

## Building a RhoElements Native Application

To enable Motorola device capabilities, add rhoelements to your application's build.yml file.

    app_type: rhoelements

### Building for Motorola Windows Mobile and CE

To build for Motorola Windows Mobile devices, follow the build instructions for [Windows Mobile](/rhodes/build#build-for-windows-mobile).

To build for Motorola Windows CE devices, install MC3000c50b PSDK from the [Symbol support site](http://support.symbol.com/support/search.do?cmd=displayKC&docType=kc&externalId=11964&sliceId=&dialogID=45371217&stateId=0%200%2045367143). 

Then add MC3000c50b to your application's build.yml file.

        wm:
          sdk: "MC3000c50b (ARMV4I)"

Then follow the Rhodes build instructions for [Windows Mobile](/rhodes/build#build-for-windows-mobile).

NOTE: RhoElements 2.0 applications will not work in the case of an incorrect network setup on a Windows Mobile device, because RhoElements 2.0 relies on <code>localhost</code> hostname and <code>127.0.0.1</code> IP-address presence.
In general, when connected to a PC, the device should have Internet connectivity: e.g. the user should be able to browse web with Internet Explorer from the Windows Mobile device.
In case of broken Internet connectivity, make sure that at <code>Settings</code> » <code>Connections</code> » <code>Connections</code> » <code>Advanced</code> » <code>Select Networks</code>
the value <code>My ISP</code> is selected in both select boxes.


### Building for Motorola Android

To run a RhoElements application on an ET1 device:

* Install [Android USB drivers](http://developer.android.com/sdk/win-usb.html).
* On the ET1 device, define Symbol USB vendor ID (0x05e0) in (user_profile)/.android/adb_usb.ini.

		0x05E0

Then follow the Rhodes build instructions for [Android](/rhodes/build#build-for-android).

## Licensing

The following features require Motorola RhoElements v2 license:

* [Motorola Capabilities](/rhoelements/moto-api-beta4#build)
* [Motorola WebKit](/rhoelements/moto-api-beta4#motorola-webkit-browser)
* [Motorola Barcode extension](/rhoelements/moto-api-beta4#barcode-api), [Barcode extension](/rhodes/device-caps#barcode)
* [NFC extension](/rhodes/device-caps#nfc)
* [Database Encryption](/rhodes/rhom#database-encryption)
* [Inline Signature Capture](/rhodes/device-caps#signature-capture)

### License for Motorola devices(Windows Mobile, Windows CE and Android ET1)

When an application starts on a Motorola device, the License screen is displayed with the following options:

* Scan Company Name barcode, Scan License barcode.
* Enter Company name and License number manually.
* License device via Internet.

Both type of Motorola RhoElements v2 licenses can be used in this case: device (with particular device UUID) and deployment (without link to particular device UUID).

After a valid license is provided, the device become 'Licensed'. The next time the application is started, the License screen will be displayed for a short period with a 'Device is Licensed' message.

### License for non-Motorola devices
Deployment License information should be provided at application build time in the application build.yml file:

    motorola_license_company: 'Deployment License Company name'
    motorola_license: 'Deployment License Number'

When the application is started, the license is checked for validity. If the license is invalid, the application will exit.

## Choosing the Motorola WebKit Browser or the Device Browser

RhoElements 2.0 will automatically use the Motorola WebKit browser for Windows Mobile, Windows CE and Android (ET1) devices when you add the rhoelements app_type to your application's build.yml.

    app_type: rhoelements
    
To use the native (built-in) web browser for your device platform, and still use the Motorola device capabilities such as Barcode, add the native browser capability to your application's build.yml file.
    
    capabilities:
    - native_browser

To use the Motorola WebKit Browser on non-Motorola Windows Mobile, Windows CE, or Android devices, add the Motorola browser capability to your application's build.yml file.

    capabilities:
    - motorola_browser

## Using the RhoElements Shared Runtime Application

The RhoElements Shared Runtime application provides access to the [RhoElements libraries](/rhoelements/developersreference), and allows you to create two types of RhoElements applications:

* RhoElements 2.0 native applications that use shared libraries. This allows several RhoElements 2.0 native applications to share a single RhoElements Shared Runtime application (RhoElements specific binaries and the Rhodes Ruby libraries), with the application specific code for each RhoElements 2.0 native application in separate directories.

* RhoElements 2.0 hybrid applications, which access the device capabilities with both HTML tags (EMML tags and more) and JavaScript calls, similar to a RhoElements 1.0 application.

The RhoElements Shared Runtime Application:

* contains all the RhoElements specific binaries and the Rhodes Ruby libraries.
* contains all Native Extensions included at build time of Shared Runtime.
* may contain a public folder with common files like JavaScripts, CSS, images, etc. RhoElements first looks in the application public folder, then it looks in the Shared Runtime public folder.

The application bundle used in Shared Runtime mode contains only application specific code and ruby extensions. (Native extensions should be included in Shared Runtime.)

**NOTE: RhoElements 2.0 Beta 4 supports Shared Runtime only for Windows Mobile and CE devices.**

The Shared Runtime application is a RhoElements application, so you can configure and build it for a specific OS.
 
### Building the RhoElements Shared Runtime Application

To build the Shared Runtime Application, perform the following steps.

On the command line on your Windows PC, navigate to this folder.

	<RhoStudio>\ruby\lib\ruby\gems\1.8\gems\rhoelements-2.0.0\RhoElements2

To build for Windows Mobile or Windows CE, run this command.

        rake device:wm:production

The resulting `cab` file can be found at `<RhoStudio>\ruby\lib\ruby\gems\1.8\gems\rhoelements-2.0.0\RhoElements2\bin\target\<platform_id>\RhoElements2.cab`.

To build for Android, run this command.

        rake device:android:production

The resulting `apk` file can be found at `<RhoStudio>\ruby\lib\ruby\gems\1.8\gems\rhoelements-2.0.0\RhoElements2\bin\target\RhoElements2.apk`

### Deploying RhoElements Shared Runtime App on Your Windows Mobile/CE Device

To install the Shared Runtime application on your specific device, go to the [build instructions](/rhodes/build) for your platform and use the instructions to deploy an application on your device.

NOTE: The RhoElements Shared Runtime application <b>must</b> be installed to the primary disk partition on the Windows CE/Mobile device, i.e. it has to be installed to `\Program Files\RhoElements2` only.
On Windows Mobile, the `Device` option must be selected when the installer asks for the location to install.
On Windows CE, the default path (`\Program Files\RhoElements2`) must be selected.

### RhoElements Application Logging

- Windows Mobile/CE

    1. RhoElements log file name is defined at 'build.yml' with 'applog' parameter (by default the log file name is `rholog.txt`).
    2. Location of the log file of <b>Hybrid</b> application is defined by the following rules (in the order of priority):

        1. If the `Value` attribute of `Configuration` > `Logger` > `LogProtocol` tag in the configuration file equals "FILE" or "HTTP",
        then the path to the log file is taken from the `Configuration` > `Logger` > `LogURI` tag.
            - In case of "FILE" protocol, the file name part of `LogURI` is ignored and `rholog.txt` (or what is specified by 'applog' parameter at 'build.yml') is used as a file name.
            - In case of "HTTP" protocol, the log messages are sent to the `LogURI` via POST HTTP-requests.

        2. If the start page parameter is a local file, then this file folder is used to store the log file.
        The file name part of the start page parameter is ignored and `rholog.txt` (or what is specified by 'applog' parameter at 'build.yml') is used as the file name.

        3. Otherwise the log file is placed in the `rho` folder in the Runtime installation folder.

    2. RhoElements <b>Native</b> application log file is placed to `rho` folder of the application folder.

- Android

    1. RhoElements <b>Hybrid</b> application's log is configured at Config.xml
    If the `value` attribute of `Configuration` > `Logger` > `LogProtocol` tag in the configuration file equals "FILE" or "HTTP",
    then destination of log is taken from the `Configuration` > `Logger` > `LogURI` tag.
        1. In case of "FILE" protocol log messages are stored to file specified with 'value' attribute of 'LogURI' tag.
        2. In case of "HTTP" protocol log messages are sent to host and port specified with 'value' attribute of 'LogURI' and 'LogPort' tags via POST HTTP-requests.

    2. RhoElements <b>Native</b> application's log is configured in Rhodes way at rhoconfig.txt located in app source root folder.
        1. 'logserver' parameter is used to send log to the host via HTTP.
        2. There is no option to store log file at device in this case.
        3. If application is started with 'rake run:android[:device]' command then log is additionally stored at app source root folder. Name of the log file is configured at build.yml with 'applog' parameter (by default the log file name is `rholog.txt`).

Note: See [configure logging](/rhodes/configuration#run-time-configuration) using the parameters in `rhoconfig.txt`.
Note: See [enable HTTP-logging](/rhodes/test-log-debug#logging) with a help of `rhologurl` parameter in `rhoconfig.txt`.

## Creating RhoElements 2.0 Native Applications in Shared Runtime Mode

First, build the RhoElements Shared Runtime application and deploy it onto your mobile device. Then create your RhoElements Native application as you normally would.

### Building RhoElements 2.0 Native Applications in Shared Runtime Mode

Set your RhoElements 2.0 native application to build in Shared Runtime mode by adding `use_shared_runtime` to your application's build.yml file.

    wm:
      use_shared_runtime: yes

All RhoStudio or rake commands will then automatically build your application in Shared Runtime mode.

* Windows CE and Windows Mobile: Follow the build instructions for [Windows Mobile](/rhodes/build#build-for-windows-mobile).
* Android ET1: Follow the build instructions for [Android](/rhodes/build#build-for-android).

NOTE: You <b>must</b> install your RhoElements 2.0 native application that uses shared runtime mode to the primary disk partition of the Windows CE/Mobile device, i.e. install to `\Program Files\&lt;app-name&gt;` only.
On Windows Mobile, you must select the `Device` option when the installer asks for the location to install.
On Windows CE, you must select the default path (`\Program Files\&lt;app-name&gt;`).

### Custom RhoElements configuration file

It is possible to include custom RhoElements configuration file `Config.xml` to application bundle.
If configuration file is the same for all supported platforms, then it's sufficient to add to `build.yml`:

    rhoelements:
      config: <relative-path-to-Config.xml>

NOTE: The path to <code>Config.xml</code> must be specified relatively to the application root folder, e.g. <code>Config/Config.xml</code>.

If configuration file differs for each platform, then add the following lines to `wm` and `android` sections of `build.yml` accordingly:

    wm:
      rhoelements:
        config: <relative-path-to-Config.xml-for-WM>

    android:
      rhoelements:
        config: <relative-path-to-Config.xml-for-Android>

For example:

    wm:
      rhoelements:
        config: Config/Config.xml.wm

    android:
      rhoelements:
        config: Config/Config.xml.android

### Setting the Shortcut (.lnk) for Windows Mobile and CE

If a RhoElements v2.0 application running in Shared Runtime mode is not a hidden app (i.e. there is no `hidden_app: yes` line at `build.yml`),
then on Windows Mobile or Windows CE the shortcut (`.lnk` file) containing the complete command line and icon path is created and placed to:

* _Start Menu_ if the application is installed from the `.cab` file or by a `rake run:wm:device:cab` command.
* _application folder_ if the application is installed by a `rake run:wm:device` command.

The generated `.lnk` is a standard Windows Mobile/CE shortcut file having the following format: 
`<line-length>#"<runtime-exe>" -approot="<app-folder>"?"<icon-path>"`

The following command line parameter is used by the RhoElements Shared Runtime (`RhoElements2.exe`) for RhoElements 2.0 Native applications:
        
    -approot='<path-to-app>': Specifies the path to the root folder
        of the RhoElements v2.0 application,
        e.g. -approot='\Program Files\app'

If the `-approot` parameter is not present, then the value from `Configuration` > `Applications` > `Application` > `General` > `StartPage` tag of the RhoElements Shared Runtime configuration file will be used as the start page parameter (usually it points to 'Welcome to Motorola RhoElements' page).

Set the `approot` parameter in the .lnk file to point to your RhoElements 2.0 application, such as:

	81#"\Program Files\Rhoelements2\rhoelements2.exe" -approot='\Program Files\myre2app'

QUESTION: When do you need to set approot, and do you have ever have to create this .lnk file yourself for a RE 2.0 native app that is not hidden?
QUESTION: Is there anything else you need to do to have multiple RE 2.0 native apps use the same RhoElements Shared Runtime Application?

## Running RhoElements Hybrid Applications

A RhoElements hybrid application is a RhoElements 1.0 application that is set up to run in the RhoElements 2.0 environment. To develop a RhoElements Hybrid application, you do not use RhoStudio: instead, you use a web development environment, such as Eclipse or Visual Studio. 

You start a RhoElements hybrid applications by using the RhoElements Shared Runtime command line parameters. You set these parameters in a shortcut (.lnk) file for Windows Mobile/CE; you must create this file. You can use a text editor such as Notepad on Windows CE, or use the File menu in Platform Builder (New Project or File, Text File type). Edit the file for command line parameters and save it to \Windows\Start Menu. This will put the shortcut at the top level in your Start Menu.

The Shared Runtime installation path on Windows CE/Mobile devices is `\Program Files\RhoElements2` and the path to the executable is `\Program Files\RhoElements2\RhoElements2.exe`.

The following command line parameters are supported by the RhoElements Shared Runtime (`RhoElements2.exe`):

    /C: Specifies the location of the configuration file for the
        RhoElements v1.0 application,
        e.g. /C:file://\application\config.xml
        
    /S: Specifies the start page of the RhoElements v1.0 application,
        e.g. /S:file://\HTML\index.html
        e.g. /S:http://www.motorola.com

If the `/C` parameter is present with no `/S` parameter, then the value from `Configuration` > `Applications` > `Application` > `General` > `StartPage` tag
of the configuration file will be used as the start page parameter.

If the `/S` parameter is present with no `/C` parameter, then the default configuration file from the runtime will be used to launch the application.

If neither the `/S` nor `/C` parameters are present, then the value from `Configuration` > `Applications` > `Application` > `General` > `StartPage` tag of the RhoElements Shared Runtime configuration file will be used as the start page parameter (usually it points to 'Welcome to Motorola RhoElements' page).

The format in the .lnk file is:

	<line-length>#"<runtime-exe>" <command-line-parameter>"<app-folder>"

For example, if you want to run a RhoElements 1.0 application, then you might have a .lnk file containing:

	89#"\Program Files\Rhoelements\rhoelements.exe" /S:file://\Demos\AttendeeTracker\index.html
