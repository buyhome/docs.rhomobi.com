
#UpcEanSecurityLevel Decoder Setting
<span class="label label-info">HTML</span> <span class="label label-warning">JAVASCRIPT</span> <span class="label label-important">RUBY</span> <span class="label label-inverse">RHOELEMENTS</span>

<b>
The UpcEanSecurityLevel Decoder Setting is used to set the upcEanSecurityLevel which describes the UPC/EAN security level.
</b>

##Syntax

<table class="re-table"><tr><th class="tableHeading">upcEanSecurityLevel (Decoder Setting) &lt;META&gt; Syntax
</th></tr><tr><td class="clsSyntaxCells clsOddRow"><p>&lt;META HTTP-Equiv="scanner" content="upcEanSecurityLevel:[parameter]"&gt;</p></td></tr></table>
<table class="re-table"><tr><th class="tableHeading">upcEanSecurityLevel JavaScript Object Syntax:</th></tr><tr><td class="clsSyntaxCells clsOddRow">
XXXXXBy default the JavaScript Object <b>'scanner'</b> will exist on the current page and can be used to interact directly with the upcEanSecurityLevel.
</td></tr><tr><td class="clsSyntaxCells clsEvenRow">
To Set upcEanSecurityLevel parameters via JavaScript use the following syntax: scanner.Parameter = Value;
<P />e.g. <b>scanner</b>.upcEanSecurityLevel = Value;
</td></tr></table>
<table class="re-table"><tr><th class="tableHeading">UpcEanSecurityLevel Ruby Object Syntax:</th></tr><tr><td class="clsSyntaxCells clsOddRow">
By default the Ruby Object <b>'Scanner'</b> will exist on the current page and can be used to interact directly with the UpcEanSecurityLevel.
</td></tr><tr><td class="clsSyntaxCells clsEvenRow">
To Set UpcEanSecurityLevel parameters via Ruby use the following syntax: Scanner.Parameter = Value
<P />e.g. <b>Scanner</b>.upcEanSecurityLevel = Value
</td></tr></table>


##Parameters


Items listed in this section indicate parameters, or attributes which can be set.
<table class="re-table"><col width="20%" /><col width="20%" /><col width="38%" /><col width="22%" /><tr><th class="tableHeading">Name</th><th class="tableHeading">Possible Values</th><th class="tableHeading">Description</th><th class="tableHeading">Default Value</th></tr><tr><td class="clsSyntaxCells clsOddRow"><b>upcEanSecurityLevel:[Value]
</b></td><td class="clsSyntaxCells clsOddRow">0 - 3 inclusive</td><td class="clsSyntaxCells clsOddRow">0: This setting allows the scanner to operate in its most aggressive state, while providing sufficient security in decoding most 'in-spec' barcodes.  1: This setting eliminates most mis-decodes.  2: Select this option if security level 1 fails to eliminate mis-decodes.  3: Select this option if security level 1 and 2 fail to eliminate mis-decodes.  Be advised that selecting level 3 is an extreme measure against mis-decoding and will significantly impair the decoding ability of the scanner.</td><td class="clsSyntaxCells clsOddRow">Device specific</td></tr></table>
<table class="re-table"><col width="78%" /><col width="8%" /><col width="1%" /><col width="5%" /><col width="1%" /><col width="5%" /><col width="2%" /></table>


<table class="re-table"><tr><th class="tableHeading">Supported Devices</th><td class="clsSyntaxCell clsOddRow">All supported devices.</td></tr><tr><th class="tableHeading">Persistence</th><td class="clsSyntaxCell clsEvenRow">Transient - Decoder settings are only guaranteed to persist until the Scanner is disabled</td></tr><tr><th class="tableHeading">Minimum Requirements</th><td class="clsSyntaxCell clsOddRow">Scanner or Imager module and device that supports upcEanSecurityLevel.</td></tr></table>


##Examples

The following example sets the upcEanSecurityLevel to check ambiguous characters:

	<META HTTP-Equiv="scanner" Content="allDecoders:enabled">
	<META HTTP-Equiv="scanner" Content="upcEanSecurityLevel:ambiguous">
	<META HTTP-Equiv="scanner" Content="enabled">
	
Above example can also be written as shown below:

	<META HTTP-Equiv="scanner" Content="allDecoders:enabled;upcEanSecurityLevel:ambiguous;enabled">
	
or

	<META HTTP-Equiv="scanner-allDecoders" Content="enabled">
	<META HTTP-Equiv="scanner-upcEanSecurityLevel" Content="ambiguous">
	<META HTTP-Equiv="scanner-enabled" Content="SCN1">
	


