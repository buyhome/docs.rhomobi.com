RhoHub Tutorial
================

Introduction
---

The [Rhodes](/rhodes/introduction) framework allows you to quickly create and build applications for multiple smartphone operating systems. RhoHub makes building Rhodes applications even easier, reducing the overhead of getting started and as well as streamlining ongoing development effort. 

Rhodes applications are written within a Model View Controller pattern.  The views are written with your familiar web development toolkit of  HTML, CSS, and JavaScript.  The controllers are written in Ruby, using Rhodes first mobile implementation of Ruby for each smartphone operating system.  Rhodes features an app generator that creates controllers and views for business objects that provide basic listing and editing of data, enabling most of your development to be focused on optimizing your views.  

This tutorial shows you how to build a simple product inventory application that allows users to create, retrieve and edit local data without requiring a connection to the Internet.

Setup
---

Before using your RhoHub account, you will need the following prerequisites:

* Install Git on [Mac](http://code.google.com/p/git-osx-installer/downloads/list?can=3), [Windows](http://code.google.com/p/msysgit/), or [Linux](http://git-scm.com/download)
 
* [Install Rhodes](/rhodes/install)
* If you plan to use sync, [install RhoSync](/rhosync/install)

### Create your RhoHub account

* [Create a RhoHub account](https://app.rhohub.com/sign_up/free) or if you already have an account, [login](https://app.rhohub.com/login).  After signing up, you will receive an email containing a link directing you to http://app.rhohub.com/your-user-name.  

* Add your SSH public key in the RhoHub "SSH Keys" page.  From <a href="http://rhohub.com">http://rhohub.com</a>, click "My Account".  Click the "SSH Keys" link in the right top navigation.  

<img src="http://img.skitch.com/20100913-d4eendxe473ury4f59f7m4bwxs.jpg"/>

* For help with generating and adding a public key for your operating system, click on the help (?) button in the upper right corner of the page.

<img src="https://img.skitch.com/20110125-giqjxxcmhyafq88p2r9j9s7244.png"/>

* If you already have a public key generated, copy the contents of your public key.  Then you can paste it into the "Public Key" field of the form.  

<img src="http://img.skitch.com/20100913-knjph8qc9usc591yqsbsarkkeg.jpg"/>

### Create a Project

RhoHub will create a Rhodes application and the corresponding RhoSync server application and store them in a git repository.  Then you will set up a local git repository.  We'll focus first on the Rhodes application: creating it in RhoHub and local setup for development.  If you want to do only client development, you can ignore the generated RhoSync application.

#### Generate Project in RhoHub

To create your new RhoHub project, go to [rhohub.com](http://rhohub.com). Log into your account if needed. Click the "Create a New Project" button. Give your project a name and description.

You will notice that "Generate Apps?" is checked by default, this means we will have a working skeleton [Rhodes](/rhodes/introduction) and [RhoSync](/rhosync/introduction) app generated for us. You can also click to open "Select Rhodes and RhoSync Version" and edit the version numbers as is shown below, or you can leave the version numbers at the defaults.

<img src="http://rhodocs.s3.amazonaws.com/rhohub-tutorial/rhohub-create-project.png">

After you click "Create a New Project," you will see your application displayed in the Rhodes App tab.

<img src="http://rhodocs.s3.amazonaws.com/rhohub-tutorial/rhohub-store-project-qarrow.png">

If you click the More Info button to the right of your project name, help text appears with the exact set of commands (such as the Git clone command) that you can copy and paste into your terminal to access your project locally.

If you click on the small pencil icon to the right of your project name, or your project description, or your Rhodes app name, you can edit the name or description.

#### Setup Local Development

Your new project is now hosted in a Git repository by RhoHub.  To access and edit the code, you can either use the [RhoHub Editor](/rhohub-editor-tutorial), or you can create a local Git repository of your Rhodes project code on your computer.  The git clone command will create a local repository with a local branch called "master" and set up the remote repository with the name "origin".

	:::term
	$ git clone git@git.rhohub.com:yourname/Store-rhodes.git

If you are new to git, you will need to set up your credentials:

	:::term
	$ git config --global user.name 'John Doe'
	$ git config --global user.email johndoe@example.com

For more details on git, see the [git documentation](http://git-scm.com/documentation).

With RhoHub you can pick just one platform SDK for local development and then use the hosted build capability to build and test the other platforms.  This saves significant setup time for developers and creates an efficient workflow.  Since the Android SDK supports Mac, Windows and Linux, we will use it for this tutorial.

Creating a Simple Application
---

Next we'll modify the application to track store inventory on the device.  We'll create a "product" model object and the UI to create, modify, display and delete data.  Initially we'll focus on building an application that runs completely on the device without server connectivity.

### Verify Setup

To verify that you have installed rhodes, in a terminal type:
	
	:::term
  	$ gem list rhodes

You should see a version of rhodes that is the same or higher than the version that was selected when you built your Rhodes app. For example:
  	
	*** LOCAL GEMS ***
  
	rhodes (3.0.2)

Go to your Rhodes app directory created with the git clone command:

	:::term
  	$ cd Store-rhodes

Set up your project to refer to your local Rhodes SDK with the following command:
  
	:::term
	$ set-rhodes-sdk

### Create Product UI

Use the "rhodes" command to generate a model for your project (in this case we create a 'product' model with five attributes including name, brand, price, quantity and sku):

	:::term
  	$ rhodes model product name,brand,price,quantity,sku

Rhodes provides this app generator tool that quickly generates a controller and views for the identified model.  It can be used to create an entire application with standard screens or "views". You can then modify the views to create exactly the user experience that you want.  

By default, your application will contain views that allow your users to interact with the object, and each attribute you add to your object will be available as field or strings in your UI.   The rhodes app generator also generates your controller file, containing code that supports default actions of listing, creating, displaying, updating and deleting your object will be created for the object as well.  

**NOTE: Each model you create must contain at least one attribute.  Attributes should be named using alphanumeric strings.**

You should see the following output from the rhodes command:

  	Generating with model generator:
	   [ADDED]  app/Product/index.erb
	   [ADDED]  app/Product/edit.erb
	   [ADDED]  app/Product/new.erb
	   [ADDED]  app/Product/show.erb
	   [ADDED]  app/Product/index.bb.erb
	   [ADDED]  app/Product/edit.bb.erb
	   [ADDED]  app/Product/new.bb.erb
	   [ADDED]  app/Product/show.bb.erb
	   [ADDED]  app/Product/product_controller.rb
	   [ADDED]  app/Product/product.rb
	   [ADDED]  app/test/product_spec.rb

The "rhodes model" command generates model, view and controller files.  The view files are ERB (Embedded Ruby) files.  If you are unfamiliar with ERB, see this [cheat sheet](http://cheat.errtheblog.com/s/erb/) or [full reference docs](http://ruby-doc.org/stdlib/libdoc/erb/rdoc/classes/ERB.html).

For this example we only use one object.  You can create additional objects for your app by calling rhodes again to create additional models with corresponding UI.

#### Set the Start Page
By default, a new Rhodes application displays the content in app/index.erb on launch.  In more complex applications, you can edit that file to contain links to different pages in your application. However, since this application only has a single object, we will use the products index as the start page.

Edit "rhoconfig.txt" at the root level of the source directory and define the path to your start page:
	
	start_path = '/app/Product'

**NOTE: Paths are case-sensitive.**

#### Commit the Changes

After each step, we'll add our changes to the local git repository:

	:::term
	$ git commit -am "added store model"

The -a option includes all of the files that have been modified or added, and the -m option specifies the commit message which follows.

### Run the Application

To run the application, Rhodes provides comprehensive scripts which build for a specific device, run the device emulator and then install the build on the emulator.  Using the native SDKs this is a time consuming multi-step process, with Rhodes it can be executed with a single command (although can still take up to a few minutes to execute, depending on your desktop hardware and mobile platform).

Choose one of the following commands (wm = Windows Mobile, bb = Blackberry, iphone or android):

	:::term
  	$ rake run:android
  	$ rake run:iphone
  	$ rake run:bb
  	$ rake run:wm:cab

You can use "rake -T" to print a complete list of all of the automated build command with descriptions of what each does.

* Windows is required to test builds and install to a device for BlackBerry and Windows Mobile. Running the simulators in Windows virtual machines such as VMware or Parallels works fine. 
* Mac OS X 10.5+ is required for testing iPhone applications.
* For instructions on installing the mobile SDKs to build for all of the smartphone platforms, see [Build Rhodes Application](/rhodes/build).

Since Android simulators are available for all major operating systems, we'll build our app for Android in this tutorial.

### Using the Inventory application

Your Inventory application features several auto-generated pages corresponding to the actions in your Product object's controller.rb file ("index", "show", "new", "edit", "create", etc).   The page we are using as our start page uses the index action and the "/product/index" view file, so the first thing a user will see when launching the application is the list of products they have added.

But our list is empty!  We need to add records to the before they can be displayed in the list! 

To create a new product record, click the "new" button on the index page.  You will see the following page:

<img src="http://img.skitch.com/20100920-n1tb66e43rxm8sqgh1au7xty1k.png"/>

The soft keyboard comes up automatically. You can use the arrow keys to move between text fields.  When the button has focus, the soft keyboard will automatically hide.

When you click "New", the controller creates an instance of the Product object, then renders the page using new.erb.  You can see the method for the "new" action in your applications source code at Product/controller.rb line 24.  

New products you create will be displayed in a list on the index page.  The following screenshots show data entered for the Acme Hovercraft. When you click create, the controller.rb action "create" is called, creating the instance of the object and returning you to the main product page.  The main product index will now show one item in the list.  By default, only the first attribute you created for your object will be displayed to represent the product  -  in this case, Hovercraft has been added to the inventory.

<img src="http://img.skitch.com/20100920-n1fcmdnekn21swgxsqdckx7qe6.png"/>

To view full details of the item's attributes, click the link for that item.  If you click on the "Hovercraft" item, you will see a page that displays all of the attributes for the hovercraft:

<img src="http://img.skitch.com/20100920-rifcp756eeu3icji6ema4rtgda.png"/>

To edit a product, click "Edit" in the top-right.  The application will display a page similar to the "new" page which allows you edit or delete the record.

Build and Test on Multiple Platforms
---
Once you have your application working well locally in the simulator for a specific platform,  you will want to test across all of the platforms that you plan to support.  Using RhoHub you can build for Android, BlackBerry, Windows Mobile, Windows 7, and iPhone.

First make sure that your latest changes have all been committed to the remote repository:

	:::term
	$ git push origin master

From your RhoHub account page, you will see each of your projects listed. To create a build for your project:

1. Select your project.
2. in the Rhodes app tab, select the Target Device and its Platform Version.
3. Enter a different Rhodes Git revision if you do not wish to use the default.
4. Click the "Build" button.

<img src="http://rhodocs.s3.amazonaws.com/rhohub-tutorial/rhohub-store-rhodes-barrow.png"/>

### Download

Once the build is finished, you will see "completed" under Status, and a download button:

<img src="http://rhodocs.s3.amazonaws.com/rhohub-tutorial/rhohub-store-rhodes-download.png"/>

Click on the download button to download a zipped file; in the case on Android, the zipped file contains an .apk file. The .apk file is an Android executable. All you need to do is to put the .apk on an http server, browse to it from a device, and you will be prompted to install the application.

Customizing Views
---

By default, the index page displays items using the item's first attribute, the name of each product. But what if we have multiple products with the same name from the different manufacturers? We won't be able to distinguish between them from the index alone.  

So that our users won't have to view each record to find out which product is which, let's add the brand attribute to the index page, allowing us to can distinguish different products.  To modify the display of our application's index page, we can simply edit the index.erb file.

Open app/Products/index.erb and find the following line (around line 20):

	:::html
	<span class="title"><%= product.name %></span>
	<span class="disclosure_indicator"></span>

Add the product's name to the list item as follows:  

	:::html
	<span class="title">
	  <%= "#{product.brand} #{product.name}" %>
	</span>
	<span class="disclosure_indicator"></span>

Save the file.
On the command line, type:

	:::term
	$ rake run:android

Now you should see the brand and name in the list item.  

**NOTE: You will need to re-enter your test data.**

<img src="http://img.skitch.com/20100920-n5efc3r1jwwcqb7x7639ykuxw3.png"/>

RhoSync
---

Your application is pre-configured to use the RhoSync server.  To access and edit the code, you can either use the [RhoHub Editor](http://docs.rhomobile.com/rhohub-editor-tutorial), or you can create a local Git repository of your RhoSync project code on your computer with the git clone command.

	:::term
	$ git clone git@git.rhohub.com:yourname/Store-rhosync.git

Then you will need to create a source adapter to connect to whatever backend you want to sync to.  See the [RhoSync tutorial](/rhosync/tutorial) for details on how to code that, but you don't need to run the server locally.  Simply check in your code (and push to the remote repository) and then follow the steps below to deploy the server on RhoHub.

### Deploy your RhoSync app

To deploy your RhoSync app, open your RhoHub project, click on the RhoSync tab, then click the "Deploy" button. 

<img src="http://rhodocs.s3.amazonaws.com/rhohub-tutorial/rhohub-store-rhosync-deploy.png"/>

The first time you deploy, it will take a few minutes as the server environment is bootstrapped.  Once it is done you will see a deploy url which you can click on to see your [RhoSync web console](/rhosync/web-console).  This url will be static for this RhoSync app, even if you rename the app.

<img src="http://rhodocs.s3.amazonaws.com/rhohub-tutorial/rhohub-store-rhosync-url.png"/>

### Login

Now you can launch your Rhodes app and click login -> sync.  In the web console, you should see a new device registered under the username you used to login.

You can view more information about RhoHub's deploy feature by clicking on the "More Info" icon in the RhoHub/RhoSync project.

<img src="http://rhodocs.s3.amazonaws.com/rhohub-tutorial/rhohub-store-rhosync-qarrow.png"/>

### Manage Collaborators

Open the "Collaborators" tab for your project to add/edit the project's team.

<img src="http://rhodocs.s3.amazonaws.com/rhohub-tutorial/rhohub-store-collaborators.png">

There are two types of collaborators in RhoHub:

1. Owners: Have full read/write access to the project, control of builds and deploys, the ability to rename apps and rename/delete the project, and add/edit the collaborators.
2. Members: Have full read/write access to the project, control of builds and deploys, and can view other collaborators.

Frequently Asked Questions
---

* How do I add gems to my RhoSync application?

RhoSync applications are deployed to [Heroku](http://heroku.com), therefore adding new gems is managed by the [.gems file](http://docs.heroku.com/gems).  For example, to add the [rdiscount](http://github.com/rtomayko/rdiscount/) gem to your RhoSync application, your .gems file would look like:

  	rhosync #=> added automatically by RhoHub
  	rdiscount --version 1.6.5

* Where are my RhoHub 1.0 files? 

RhoHub 2.0 is a new, project-based architecture that organizes your Rhodes and RhoSync applications.  For this reason, we archived RhoHub 1.0 account files so that you can import them into RhoHub 2.0's project structure if you wish.  If you had a RhoHub 1.0 account, you will notice an "Archived Account Files" link in the upper right when you login.  Here you can access all of your RhoHub 1.0 app files and device builds.

Useful commands
---
Show android commands including creating/deleting/updating virtual devices, projects, adb, sdk 
  	
	:::term
	$ android --help 

Show all targets and virtual devices
  
	:::term
	$ android list

Git Resources
---

* [http://gitref.org/](http://gitref.org/) - Useful guide and introduction to git
* [http://progit.org/](http://progit.org/) - Open source book on git
* [http://git-scm.com/](http://git-scm.com/) - Git homepage

Other Resources
---

* [Webinars and Videos](http://rhomobile.com/webinars) - check out all Rhomobile webinars, videos and conference presentations

* [Rhomobile on GitHub](http://github.com/rhomobile) - The Rhomobile GitHub repository where the Rhodes and RhoSync projects are maintained

* [Google Group](http://groups.google.com/group/Rhomobile) - Rhomobile Google Group for your questions, problems and feedback

* [Book on Rhomobile development](http://www.apress.com/book/view/9781430228684) - This book is published by APress
