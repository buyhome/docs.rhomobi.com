# WebView API
<span class="label label-important">RUBY</span>&nbsp;<span class="label label-inverse">RHOELEMENTS</span>&nbsp;<span class="label">RHODES</span>&nbsp;

Call on the WebView directly from your controller.

## refresh

Force WebView to refresh the current page.

	:::ruby
	WebView.refresh
	WebView.refresh(index)

<table border="1">
<tr>
	<td><code>index</code></td>
	<td>(optional) Force the WebView to refresh the page on the tab with the specified index. If no tab bar present, index is ignored.</td>
</tr>
</table>

## navigate

Force WebView to navigate to a URL.

	:::ruby
	WebView.navigate(url, index)

<table border="1">
<tr>
	<td><code>url</code></td>
	<td>Navigate to this url.</td>
</tr>
<tr>
	<td><code>index</code></td>
	<td>(optional) Force the WebView to navigate using the page on the tab with the specified index. If no tab bar present, index is ignored.</td>
</tr>
</table>

## current_location

Returns the url (location) of the current page.

	:::ruby
	WebView.current_location
	WebView.current_location(index)

<table border="1">
<tr>
	<td><code>index</code></td>
	<td>(optional) Return the url for the page on the tab with the specified index. If no tab bar present, index is ignored.</td>
</tr>
</table>

## execute_js

Execute JavaScript on the current page from your controller. Supported on iPhone, Android, Windows Mobile and Blackberry 5.0 in full browser mode.

	:::ruby
	WebView.execute_js(string)

<table border="1">
<tr>
	<td><code>string</code></td>
	<td>The call to the JavaScript method on the current page, such as "test();".</td>
</tr>
</table>

## active_tab

Returns an index of @tab array for the currently selected tab.

	:::ruby
	WebView.active_tab

## full_screen_mode

Switch to/from full screen mode.

	:::ruby
	WebView.full_screen_mode(enable)

<table border="1">
<tr>
	<td><code>enable</code></td>
	<td>1- enable full screen mode. 0 - disable full screen mode.</td>
</tr>
</table>

## set_cookie

When WebView loads the specified url (either by selecting link or from calling WebView.navigate), it will add this cookie to the HTTP request.

	:::ruby
	WebView.set_cookie(url, cookie)

<table border="1">
<tr>
	<td><code>url</code></td>
	<td>Set a cookie to be used by WebView for this url.</td>
</tr>
<tr>
	<td><code>cookie</code></td>
	<td>One or more name/value pairs of the format "NAME=VALUE". Separate multiple name/value pairs with a semicolon.</td>
</tr>
</table>