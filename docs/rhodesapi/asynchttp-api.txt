# Rho::AsyncHttp API
<span class="label label-important">RUBY</span>&nbsp;<span class="label label-inverse">RHOELEMENTS</span>&nbsp;<span class="label">RHODES</span>&nbsp;

Asynchronously make calls to http services.

## cancel

Cancel the current AsyncHttp call.

	:::ruby
	Rho::AsyncHttp.cancel

## download_file

Download a file to the specified filename.

[Click for an example of download_file.](/rhodes/connect-to-web-services#asynchttp-download_file-ex)

	:::ruby
	Rho::AsyncHttp.download_file(:url, :headers, :filename, :callback, :callback_param)

<table border="1">
<tr>
	<td><code>:url</code></td>
	<td>url of the request.</td>
</tr>
<tr>
	<td><code>:headers</code></td>
	<td>Hash of headers to send with the request.</td>
</tr>
<tr>
	<td><code>:filename</code></td>
	<td>The path and name where the downloaded file is received.</td>
</tr>
<tr>
	<td><code>:callback</code></td>
	<td>Callback action to execute when the request is done.</td>
</tr>
<tr>
	<td><code>:callback_param</code></td>
	<td>(optional) Parameters to send to the callback. Parameters values should be url encoded with [RhoSupport.url_encode](/rhodes/application#rhosupport-class).</td>
</tr>
</table>

## get

Perform an HTTP GET request to the specified URL.

[Click for an example of get.](/rhodes/connect-to-web-services#asynchttp-get-ex)

	:::ruby
	Rho::AsyncHttp.get(:url, :headers, :callback, :callback_param)

<table border="1">
<tr>
	<td><code>:url</code></td>
	<td>URL of the request.</td>
</tr>
<tr>
	<td><code>:headers</code></td>
	<td>Hash of headers to send with the request.</td>
</tr>
<tr>
	<td><code>:callback</code></td>
	<td>Callback action to execute when the request is done.</td>
</tr>
<tr>
	<td><code>:callback_param</code></td>
	<td>(optional) Parameters to send to the callback. Parameters values should be url encoded with [RhoSupport.url_encode](/rhodes/application#rhosupport-class).</td>
</tr>
<tr>
	<td><code>:authentication</code></td>
	<td>(optional) Send Basic Auth header with request.</td>
</tr>
<tr>
	<td><code>:ssl_verify_peer</code></td>
	<td>(optional) Verify SSL certificates. Default = true.</td>
</tr>
</table>

The authentication parameter is a hash with parameters such as the following.

<table border="1">
<tr>
	<td><code>:type</code></td>
	<td>type of request, such as :basic.</td>
</tr>
<tr>
	<td><code>:username</code></td>
	<td>the user name.</td>
</tr>
<tr>
	<td><code>:password</code></td>
	<td>the password.</td>
</tr>
</table>

## post

Perform HTTP POST request to the specified URL.

[Click for an example of post.](/rhodes/connect-to-web-services#asynchttp-post-ex)

	:::ruby
	Rho::AsyncHttp.post(:url, :headers, :body, :callback, :callback_param)

<table border="1">
<tr>
	<td><code>:url</code></td>
	<td>URL of the request.</td>
</tr>
<tr>
	<td><code>:headers</code></td>
	<td>Hash of headers to send with the request.</td>
</tr>
<tr>
	<td><code>:body</code></td>
	<td>String. The message body of the HTTP POST.</td>
</tr>
<tr>
	<td><code>:callback</code></td>
	<td>Callback action to execute when the request is done.</td>
</tr>
<tr>
	<td><code>:callback_param</code></td>
	<td>(optional) Parameters to send to the callback. Parameters values should be url encoded with [RhoSupport.url_encode](/rhodes/application#rhosupport-class).</td>
</tr>
<tr>
	<td><code>:authentication</code></td>
	<td>(optional) Send Basic Auth header with request.</td>
</tr>
<tr>
	<td><code>:ssl_verify_peer</code></td>
	<td>(optional) Verify SSL certificates. Default = true.</td>
</tr>
</table>

The authentication parameter is a hash with parameters such as the following.

<table border="1">
<tr>
	<td><code>:type</code></td>
	<td>type of request, such as :basic.</td>
</tr>
<tr>
	<td><code>:username</code></td>
	<td>the user name.</td>
</tr>
<tr>
	<td><code>:password</code></td>
	<td>the password.</td>
</tr>
</table>

## upload_file

Upload the specified file using HTTP POST.

[Click for examples of upload_file.](/rhodes/connect-to-web-services#asynchttp-upload_file-ex)

	:::ruby
	Rho::AsyncHttp.upload_file(:url, :headers, :filename, :body, :callback, :callback_param)

<table border="1">
<tr>
	<td><code>:url</code></td>
	<td>URL of the request.</td>
</tr>
<tr>
	<td><code>:headers</code></td>
	<td>Hash of headers to send with the request.</td>
</tr>
<tr>
	<td><code>:filename</code></td>
	<td>The path and name of the file to be uploaded.</td>
</tr>
<tr>
	<td><code>:body</code></td>
	<td>Leave this value blank, AsyncHttp will fill in multipart body.</td>
</tr>
<tr>
	<td><code>:callback</code></td>
	<td>Callback action to execute when the upload request is done.</td>
</tr>
<tr>
	<td><code>:callback_param</code></td>
	<td>(optional) Parameters to send to the callback. Parameters values should be url encoded with [RhoSupport.url_encode](/rhodes/application#rhosupport-class).</td>
</tr>
</table>

`upload_file` can also send multiple files in a single request.

	:::ruby
	Rho::AsyncHttp.upload_file(:url, :multipart)

<table border="1">
<tr>
	<td><code>:url</code></td>
	<td>URL of the request.</td>
</tr>
<tr>
	<td><code>:multipart</code></td>
	<td>Array of hashes containing file information.</td>
</tr>
</table>

The :multipart hash contains the following parameters.

<table border="1">
<tr>
	<td><code>:filename</code></td>
	<td>Name of the file to be uploaded.</td>
</tr>
<tr>
	<td><code>:filename_base</code></td>
	<td>(optional) Base directory containing the :filename.</td>
</tr>
<tr>
	<td><code>:name</code></td>
	<td>(optional) File type, defaults to "blob".</td>
</tr>
<tr>
	<td><code>:content_type</code></td>
	<td>(optional) Content-Type header, defaults to "application/octet-stream".</td>
</tr>
</table>

## Callback Parameters

The :callback for the AsyncHttp methods executes when the AsyncHttp request is completed. The following parameters are available in an AsyncHttp callback.

<table border="1">
<tr>
	<td><code>@params["body"]</code></td>
	<td>The body of the HTTP response.</td>
</tr>
<tr>
	<td><code>@params["headers"]</code></td>
	<td>A hash containing the response headers.</td>
</tr>
<tr>
	<td><code>@params["cookies"]</code></td>
	<td>The server cookies, parsed and usable for subsequent requests.</td>
</tr>
<tr>
	<td><code>@params["http_error"]</code></td>
	<td>HTTP error code if response code was not 200.</td>
</tr>
</table>

In the case of a JSON response (Content-Type=“application/json”), the `@params["body"]` will be parsed automatically and contain a ruby data structure. Otherwise, `@params["body"]` contains the raw response body.

In the case of an XML response (Content-Type=“application/xml”), Rhodes can automatically parse the @params["body"] as well if you enable the “rexml extension” in your application.

## Sample call

	:::ruby
	Rho::AsyncHttp.get(
	  :url => "http://www.example.com",
	  :headers => {"Cookie" => cookie},
	  :callback => (url_for :action => :httpget_callback),
	  :authentication => {
	    :type => :basic, 
	    :username => "john", 
	    :password => "secret"
	  }
	)

