#Alert API
<span class="label label-important">RUBY</span>&nbsp;<span class="label label-inverse">RHOELEMENTS</span>&nbsp;<span class="label">RHODES</span>&nbsp;

Call system alert methods for popup, vibrate, or playing audio files.

## Enabling Vibration

To use the vibrate method, you need to enable vibration on the device. Do this by adding that capability to the build.yml file:

	:::yaml
	capabilities:
	  - vibrate

## hide_popup

Closes the current popup window.

	:::ruby
	Alert.hide_popup

## play_file

Play an audio file if that media type is supported by the device.

	:::ruby
	Alert.play_file(path, media_type)

<table border="1">
	<tr>
		<td><code>path</code></td>
		<td>The path to the file, ending in the file name and extension. The file must located in the application; for example, <code>/apps/public/test-file.mp3</code>.</td>
	</tr>
	<tr>
		<td><code>media_type</code></td>
		<td>(optional) Media type can be specified explicitly, or can be recognized from the file extension. The known file extensions are ".mp3" – audio/mpeg and ".wav" – audio/x-wav.</td>
	</tr>
</table>

## show_popup

Bring the application up front and show a message in a popup window. The message can be passed as a string or a hash.

[Click for an example of show_popup with a button and callback.](/rhodes/device-caps#alerts)

	:::ruby
	Alert.show_popup "message"

<table border="1" width="100%">
<tr>
	<td><code>message</code></td>
	<td>a text string</td>
</tr>
</table>

	:::ruby
	show_popup( {
      :message => string, 
      :title => string, 
      :icon => string,
      :buttons => [string_or_hash],
      :callback => url )

<table border="1">
	<tr>
		<td><code>:message</code></td>
		<td>text displayed in the popup window</td>
	</tr>
	<tr>
		<td><code>:title</code></td>
		<td>title of the popup window</td>
	</tr>
	<tr>
		<td><code>:icon</code></td>
		<td>path to an image, or :alert for ! icon, :question for ? icon, :info for information icon.</td>
	</tr>
	<tr>
		<td><code>:buttons</code></td>
		<td>array of buttons. Specify each button either by hash with :id and :title keys, or by a string.</td>
	</tr>
	<tr>
		<td><code>:callback</code></td>
		<td>url called on button click, such as <code>url_for(:action => :on_dismiss_popup)</code>. It is called with a @params hash of :button_id, :button_title, and :button_index.</td>
	</tr>
</table>

Example call:

	:::ruby
	Alert.show_popup( {
	    :message => 'Some message', 
	    :title => 'Custom title', 
	    :icon => '/public/images/icon.png',
	    :buttons => ["Yes", "No", 
	        {:id => 'cancel', :title => 'Cancel all'}],
	    :callback => url_for(:action => :on_dismiss_popup) } )

## show_status

Display a window containing a status message. The window closes after the user clicks on its hide button.

[Click for an example of show_status.](/rhodes/device-caps#alert-show-status-ex)

	:::ruby
	Alert.show_status(title, status_text, hide_button_label)

<table border="1">
<tr>
	<td><code>title</code></td>
	<td>String. The title on the status message popup window.</td>
</tr>
<tr>
	<td><code>status_text</code></td>
	<td>String. The status message displayed in the popup status window.</td>
</tr>
<tr>
	<td><code>hide_button_label</code></td>
	<td>String. The label text for the hide button in the popup status window.</td>
</tr>
</table>

## vibrate

	:::ruby
	Alert.vibrate(duration)

<table border="1">
<tr>
	<td><code>duration</code></td>
	<td>Integer. Vibrate the device for this number of milliseconds, up to 25500; if 0 or not specified, vibrate for 2500 milliseconds.</td>
</tr>
</table>


