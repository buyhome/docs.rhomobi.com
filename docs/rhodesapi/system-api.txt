# System API
<span class="label label-important">RUBY</span>&nbsp;<span class="label label-inverse">RHOELEMENTS</span>&nbsp;<span class="label">RHODES</span>&nbsp;

Provides access to system information. 

For code examples, see [Rhodes System API Samples view file](https://github.com/rhomobile/rhodes-system-api-samples/blob/master/app/layout.erb) and [Rhodes System API Samples System Test](https://github.com/rhomobile/rhodes-system-api-samples/blob/master/app/SystemTest/controller.rb).

## get_property

Get the value of a system property.

	:::ruby
	System.get_property(system_property)

system_property can be any of the properties below:

 * platform – APPLE, Blackberry, WINDOWS, ANDROID, SYMBIAN
 * has_camera – is camera available on the device
 * screen_width – screen width in pixels
 * screen_height – screen height in pixels
 * screen_orientation – screen orientation ‘portrait’, ‘landscape’
 * ppi_x – horizontal PPI (Pixels Per Inch)
 * ppi_y – vertical PPI (Pixels Per Inch)
 * has_network – is device connected to the network
 * phone_number – device phone number
 * device_id – returns device ID which may be used to receive push messages. This is not phone device id, this is PUSH device id – you should register your phone for PUSH before get this parameter. Read Push Notification documentation about it. On iPhone it may be empty right after application started while Rhodes registers to receive PUSH notifications; you should wait till it become non-empty.
 * phone_id – returns hardware based id. It depends on capabilities configured for an application and has to remain same even across application uninstall/install.
 * full_browser – is full browser in the WebView control on Blackberry (see here for more details)
 * device_name – name of device application running on. Examples: '9000' (BB), 'iPhone', 'dream' (Android)
 * os_version – version of OS of device. Examples: '4.6.0.192' (BB), '3.0' (iPhone), '1.6' (Android)
 * locale – current language like 'en', 'ru', etc.
 * country – country abbreviation
 * is_emulator – return true if application is running on emulator
 * has_calendar – return true if calendar support is available

## set_screen_rotation_notification

Notify (call a callback method) when the screen rotates.

	:::ruby
	System.set_screen_rotation_notification(callback_url, params)

<table border="1">
<tr>
	<td><code>callback_url</code></td>
	<td>Path to callback method to run when screen rotates.</td>
</tr>
<tr>
	<td><code>params</code></td>
	<td>Parameters you passed while setting up notification, as well as width, height, and degrees.</td>
</tr>
</table>

## exit

Exit the application.

	:::ruby
	System.exit

## set_sleeping

Enable/disable phone sleeping; return to the previous state.

	:::ruby
	System.set_sleeping

## open_url

Open the application associated with the URL.

	:::ruby
	System.open_url(url)

<table border="1">
<tr>
	<td><code>url</code></td>
	<td>Open the application at this url; behavior may be different on different platforms and depend on installed software.</td>
</tr>
</table>

Note: On iPhone, if you post path of local file, then the specific iOS control (UIDocumentInteractionController) where file will previewed and user will be able open this file by selected application wich supported this filetype.

## run_app

Run an application.

	:::ruby
	System.run_app(appname, params)

<table border="1">
<tr>
	<td><code>appname</code></td>
	<td>The name of the application on the device to run, such as com.android.music.</td>
</tr>
<tr>
	<td><code>params</code></td>
	<td>String. List of parameters for the application; nil if no parameters.</td>
</tr>
</table>

Note: On iPhone, appname is the same with registered application URL scheme. Example : System.run_app('myapp', 'someparams'). This call is the same as System.open_url('myapp:someparams').

## app_install

Install an application.

	:::ruby
	System.app_install(url)

<table border="1">
<tr>
	<td><code>url</code></td>
	<td>The url of an application to install on the device.</td>
</tr>
</table>

## app_installed?

Returns true if the specified application is installed on the device.

	:::ruby
	System.app_installed?(appname)

<table border="1">
<tr>
	<td><code>url</code></td>
	<td>The name of the application.</td>
</tr>
</table>

## app_uninstall

	:::ruby
	System.app_uninstall(appname)

<table border="1">
<tr>
	<td><code>url</code></td>
	<td>The name of the application to uninstall.</td>
</tr>
</table>

## unzip_file

	:::ruby
	System.unzip_file(local_path_to_zip)

<table border="1">
<tr>
	<td><code>local_path_to_zip</code></td>
	<td>The path to the file to be zipped.</td>
</tr>
</table>

## get_start_params

Return the command line parameters as a string (iPhone only).

	:::ruby
	System.get_start_params()
